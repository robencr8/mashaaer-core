{
  "timestamp": "2025-04-03T19:55:37.950521",
  "execution_time_seconds": 3.9387001991271973,
  "exit_code": 1,
  "passed": false,
  "raw_output": "============================= test session starts ==============================\nplatform linux -- Python 3.11.10, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/workspace\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, mock-3.14.0, flask-1.3.0\ncollecting ... collected 9 items\n\ntests/test_api_caching.py::test_analyze_emotion_cache_hit \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 796fd1f9-20d7-40cf-8ad2-e15b653edbf3 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'I am feeling happy t...' in en\nPASSED                                                                   [ 11%]\ntests/test_api_caching.py::test_analyze_emotion_bypass_cache \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: c0c8ed2d-017b-4f30-bcad-95b0b05c0182 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing bypass cache' in en\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing bypass cache' in en\nPASSED                                                                   [ 22%]\ntests/test_api_caching.py::test_analyze_emotion_cache_expiration \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: d1a85058-a0e8-4ce4-8304-a61c57361b5b (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'This text is for tes...' in en\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'This text is for tes...' in en\nPASSED                                                                   [ 33%]\ntests/test_api_caching.py::test_speak_cache_hit \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test TTS caching text 5ea44f7a...', voice=default, language=en-US\nINFO     mobile_api_routes:mobile_api_routes.py:581 Mobile API: TTS successful: tts_cache/test_speech_5ea44f7a.mp3 (19 bytes)\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/test_speech_5ea44f7a.mp3\nPASSED                                                                   [ 44%]\ntests/test_api_caching.py::test_speak_different_voice_parameters \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=en-US\nINFO     mobile_api_routes:mobile_api_routes.py:581 Mobile API: TTS successful: tts_cache/default_en-US_4be9c3c2.mp3 (19 bytes)\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=voice_2, language=en-US\nINFO     mobile_api_routes:mobile_api_routes.py:581 Mobile API: TTS successful: tts_cache/voice_2_en-US_4be9c3c2.mp3 (19 bytes)\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=ar\nINFO     mobile_api_routes:mobile_api_routes.py:581 Mobile API: TTS successful: tts_cache/default_ar_4be9c3c2.mp3 (19 bytes)\nPASSED                                                                   [ 55%]\ntests/test_api_caching.py::test_cache_error_handling \n-------------------------------- live log call ---------------------------------\nWARNING  mobile_api_routes:mobile_api_routes.py:266 Failed to process cached result: Simulated database error\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 0f66cae6-7f35-4226-ac22-8e7b98bfafd4 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing error handli...' in en\nFAILED                                                                   [ 66%]\ntests/test_api_caching.py::test_cache_invalidation FAILED                [ 77%]\ntests/test_api_caching.py::test_performance_metrics FAILED               [ 88%]\ntests/test_api_caching.py::test_cache_hit_count_tracking FAILED          [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_cache_error_handling ___________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fc162ff8c50>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fc162fea660>\napp = <Flask 'main'>\n\n    def test_cache_error_handling(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests error handling in the caching mechanism.\"\"\"\n        clear_cache()\n    \n        # Mock db_manager's get_cached_response to raise an exception\n        with patch('database.db_manager.DatabaseManager.get_cached_response') as mock_get_cache:\n            mock_get_cache.side_effect = Exception(\"Simulated database error\")\n    \n            # Setup mock for emotion analysis to proceed despite cache error\n            with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n                mock_analyze.return_value = create_mock_emotion_result()\n    \n                # Request should proceed despite cache error\n                response = client.post(\n                    \"/mobile-api/analyze-emotion\",\n                    json={\"text\": \"Testing error handling\", \"language\": \"en\"}\n                )\n    \n                # Verify response\n                assert response.status_code == 200\n                result = json.loads(response.data)\n                assert result.get(\"success\") is True\n    \n                # Cache status should indicate an issue\n>               assert result.get(\"cache_status\") == \"error\"\nE               AssertionError: assert 'miss' == 'error'\nE                 \nE                 - error\nE                 + miss\n\ntests/test_api_caching.py:570: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:55:37,397 - mobile_api_routes - WARNING - Failed to process cached result: Simulated database error\n2025-04-03 19:55:37,397 - mobile_api_routes - INFO - Created new mobile session: 0f66cae6-7f35-4226-ac22-8e7b98bfafd4 (mobile app: False)\n2025-04-03 19:55:37,397 - mobile_api_routes - INFO - Mobile API: Emotion analysis request: 'Testing error handli...' in en\n------------------------------ Captured log call -------------------------------\nWARNING  mobile_api_routes:mobile_api_routes.py:266 Failed to process cached result: Simulated database error\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 0f66cae6-7f35-4226-ac22-8e7b98bfafd4 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing error handli...' in en\n___________________________ test_cache_invalidation ____________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fc161b49e50>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fc162fea3e0>\napp = <Flask 'main'>\nadd_test_cache_entry = <function add_test_cache_entry.<locals>._add_entry at 0x7fc161b3d440>\n\n    def test_cache_invalidation(client: FlaskClient, db_session: Session, clear_cache, app: Flask, add_test_cache_entry):\n        \"\"\"Tests that cache entries can be invalidated programmatically.\"\"\"\n        clear_cache()\n    \n        # Create some test cache entries\n        add_test_cache_entry(\"test_cache_key_1\", json.dumps({\"data\": \"value1\"}))\n        add_test_cache_entry(\"test_cache_key_2\", json.dumps({\"data\": \"value2\"}))\n        add_test_cache_entry(\"different_prefix_1\", json.dumps({\"data\": \"other\"}))\n    \n        # Verify entries exist\n        assert get_cache_entry(db_session, \"test_cache_key_1\") is not None\n        assert get_cache_entry(db_session, \"test_cache_key_2\") is not None\n        assert get_cache_entry(db_session, \"different_prefix_1\") is not None\n    \n        # Use db_manager to invalidate specific entry\n        with app.app_context():\n>           from database.db_manager import db_manager  # Import within context\nE           ImportError: cannot import name 'db_manager' from 'database.db_manager' (/home/runner/workspace/database/db_manager.py)\n\ntests/test_api_caching.py:612: ImportError\n___________________________ test_performance_metrics ___________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fc162fc7c90>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fc161b10e00>\napp = <Flask 'main'>\n\n    def test_performance_metrics(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that caching improves performance.\"\"\"\n        clear_cache()\n    \n        test_text = \"Performance testing with a longer text to analyze the sentiment and emotion of this passage.\"\n    \n        # Setup a slow emotion analysis mock to simulate computational cost\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            def slow_analyze(*args, **kwargs):\n                time.sleep(0.5)  # Simulate processing delay\n                return create_mock_emotion_result()\n    \n            mock_analyze.side_effect = slow_analyze\n    \n            # First request - should be slow due to analysis\n            start_time = time.time()\n            response1 = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n            first_request_time = time.time() - start_time\n    \n            # Second request - should be fast due to cache\n            start_time = time.time()\n            response2 = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n            second_request_time = time.time() - start_time\n    \n            # Verify timing improved significantly\n            assert second_request_time < first_request_time\n            assert second_request_time < 0.1  # Should be very fast for cache hit\n    \n            # Calculate and log performance improvement\n            improvement = (first_request_time - second_request_time) / first_request_time * 100\n            print(f\"Performance improvement: {improvement:.2f}% faster with cache\")\n>           assert improvement > 80  # Cache should be at least 80% faster\nE           assert 78.61062250395496 > 80\n\ntests/test_api_caching.py:666: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\nPerformance improvement: 78.61% faster with cache\n________________________ test_cache_hit_count_tracking _________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fc16152b750>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fc161ba2700>\napp = <Flask 'main'>\n\n    def test_cache_hit_count_tracking(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that cache hit counts are properly tracked.\"\"\"\n        clear_cache()\n    \n        test_text = \"Tracking cache hit counts\"\n    \n        # Setup mock for emotion analysis\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            mock_analyze.return_value = create_mock_emotion_result()\n    \n            # First request to populate cache\n            client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n    \n            # Find the cache entry\n            import hashlib\n            normalized_text = test_text.strip().lower()\n            cache_key = f\"emotion_{hashlib.md5(normalized_text.encode()).hexdigest()}_en\"\n    \n            # Check initial hit count\n            cache_entry = get_cache_entry(db_session, cache_key)\n>           assert cache_entry is not None\nE           assert None is not None\n\ntests/test_api_caching.py:691: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n=============================== warnings summary ===============================\ndatabase/models.py:7\n  /home/runner/workspace/database/models.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_api_caching.py::test_cache_error_handling - AssertionError:...\nFAILED tests/test_api_caching.py::test_cache_invalidation - ImportError: cann...\nFAILED tests/test_api_caching.py::test_performance_metrics - assert 78.610622...\nFAILED tests/test_api_caching.py::test_cache_hit_count_tracking - assert None...\n==================== 4 failed, 5 passed, 1 warning in 1.09s ====================\n"
}