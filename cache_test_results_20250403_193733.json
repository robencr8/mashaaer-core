{
  "timestamp": "2025-04-03T19:37:33.020921",
  "execution_time_seconds": 5.327369213104248,
  "exit_code": 1,
  "passed": false,
  "raw_output": "============================= test session starts ==============================\nplatform linux -- Python 3.11.10, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/workspace\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, mock-3.14.0, flask-1.3.0\ncollecting ... collected 9 items\n\ntests/test_api_caching.py::test_analyze_emotion_cache_hit \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 1795fd1c-3768-433a-9e20-b6e150e2ef85 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'I am feeling happy t...' in en\nPASSED                                                                   [ 11%]\ntests/test_api_caching.py::test_analyze_emotion_bypass_cache \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 1a809a8f-5399-4c25-84ab-05133dc851ce (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing bypass cache' in en\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing bypass cache' in en\nPASSED                                                                   [ 22%]\ntests/test_api_caching.py::test_analyze_emotion_cache_expiration \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: e0ee8da8-d562-48fb-8603-7f08d5eba836 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'This cache entry wil...' in en\nFAILED                                                                   [ 33%]\ntests/test_api_caching.py::test_speak_cache_hit \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='This is a test of text to spee...', voice=default, language=en-US\nWARNING  mobile_api_routes:mobile_api_routes.py:649 Mobile API: TTS path tts_cache/test_speech.mp3 not found or empty\nFAILED                                                                   [ 44%]\ntests/test_api_caching.py::test_speak_different_voice_parameters \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=en-US\nERROR    mobile_api_routes:mobile_api_routes.py:657 Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\nERROR    mobile_api_routes:mobile_api_routes.py:658 Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=voice_2, language=en-US\nERROR    mobile_api_routes:mobile_api_routes.py:657 Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\nERROR    mobile_api_routes:mobile_api_routes.py:658 Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=ar\nERROR    mobile_api_routes:mobile_api_routes.py:657 Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\nERROR    mobile_api_routes:mobile_api_routes.py:658 Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n\nFAILED                                                                   [ 55%]\ntests/test_api_caching.py::test_cache_error_handling \n-------------------------------- live log call ---------------------------------\nWARNING  mobile_api_routes:mobile_api_routes.py:266 Failed to process cached result: Simulated database error\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 55c31a1b-49d5-4d95-addc-2d738b6ecabc (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing error handli...' in en\nFAILED                                                                   [ 66%]\ntests/test_api_caching.py::test_cache_invalidation FAILED                [ 77%]\ntests/test_api_caching.py::test_performance_metrics \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 4e8f7192-09d4-41e5-9e02-c9f6c445e7e4 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Performance testing ...' in en\nPASSED                                                                   [ 88%]\ntests/test_api_caching.py::test_cache_hit_count_tracking \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: bff86773-e7f7-4aac-a5d4-a7e593a7e468 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Tracking cache hit c...' in en\nFAILED                                                                   [100%]\n\n=================================== FAILURES ===================================\n____________________ test_analyze_emotion_cache_expiration _____________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fb319bb08d0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fb3187402c0>\napp = <Flask 'main'>\nadd_test_cache_entry = <function add_test_cache_entry.<locals>._add_entry at 0x7fb318740680>\n\n    def test_analyze_emotion_cache_expiration(client: FlaskClient, db_session: Session, clear_cache, app: Flask, add_test_cache_entry):\n        \"\"\"Tests that cached entries expire correctly and are refreshed.\"\"\"\n        clear_cache()\n    \n        # Create a cache entry that's about to expire\n        test_text = \"This cache entry will expire soon\"\n        normalized_text = test_text.strip().lower()\n        import hashlib\n        cache_key = f\"emotion_{hashlib.md5(normalized_text.encode()).hexdigest()}_en\"\n    \n        mock_result = create_mock_emotion_result(test_text, \"excited\")\n        add_test_cache_entry(\n            cache_key,\n            json.dumps(mock_result),\n            expiry_seconds=1  # Very short expiry for testing\n        )\n    \n        # Setup mock for emotion analysis\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            # Set up a different result for when the cache expires\n            mock_analyze.return_value = create_mock_emotion_result(test_text, \"calm\")\n    \n            # First request - should hit the manually created cache\n            response = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n    \n            # Verify first response (from cache)\n            assert response.status_code == 200\n            result = json.loads(response.data)\n>           assert result.get(\"cache_status\") == \"hit\"\nE           AssertionError: assert 'miss' == 'hit'\nE             \nE             - hit\nE             + miss\n\ntests/test_api_caching.py:155: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:37:31,255 - mobile_api_routes - INFO - Created new mobile session: e0ee8da8-d562-48fb-8603-7f08d5eba836 (mobile app: False)\n2025-04-03 19:37:31,255 - mobile_api_routes - INFO - Mobile API: Emotion analysis request: 'This cache entry wil...' in en\n------------------------------ Captured log call -------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: e0ee8da8-d562-48fb-8603-7f08d5eba836 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'This cache entry wil...' in en\n_____________________________ test_speak_cache_hit _____________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fb319bb13d0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fb3187c44a0>\napp = <Flask 'main'>\n\n    def test_speak_cache_hit(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the TTS endpoint correctly uses cache.\"\"\"\n        clear_cache()\n    \n        # Setup mock for TTS generation\n        with patch('tts.tts_manager.TTSManager.generate_tts') as mock_tts:\n            # Configure the mock to return a file path\n            mock_tts.return_value = \"tts_cache/test_speech.mp3\"\n    \n            # First request - should miss cache\n            response = client.post(\n                \"/mobile-api/speak\",\n                json={\n                    \"text\": \"This is a test of text to speech caching\",\n                    \"language\": \"en-US\",\n                    \"voice\": \"default\"\n                }\n            )\n    \n            # Verify first response\n>           assert response.status_code == 200\nE           assert 500 == 200\nE            +  where 500 = <WrapperTestResponse streamed [500 INTERNAL SERVER ERROR]>.status_code\n\ntests/test_api_caching.py:195: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/speak\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:37:31,430 - mobile_api_routes - INFO - Mobile API: TTS Request: text='This is a test of text to spee...', voice=default, language=en-US\n2025-04-03 19:37:31,592 - mobile_api_routes - WARNING - Mobile API: TTS path tts_cache/test_speech.mp3 not found or empty\n------------------------------ Captured log call -------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='This is a test of text to spee...', voice=default, language=en-US\nWARNING  mobile_api_routes:mobile_api_routes.py:649 Mobile API: TTS path tts_cache/test_speech.mp3 not found or empty\n____________________ test_speak_different_voice_parameters _____________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fb3181428d0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fb31dd696c0>\napp = <Flask 'main'>\n\n    def test_speak_different_voice_parameters(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the TTS endpoint creates different cache entries for different voices.\"\"\"\n        clear_cache()\n    \n        test_text = \"Test voice parameter variations\"\n    \n        # Setup mock for TTS generation\n        with patch('tts.tts_manager.TTSManager.generate_tts') as mock_tts:\n            # Configure the mock to return different paths for different voices\n            def mock_generate_tts(text, voice_id=None, language=None):\n                return f\"tts_cache/{voice_id or 'default'}_{language or 'en'}.mp3\"\n    \n            mock_tts.side_effect = mock_generate_tts\n    \n            # First request with default voice\n            response1 = client.post(\n                \"/mobile-api/speak\",\n                json={\n                    \"text\": test_text,\n                    \"language\": \"en-US\",\n                    \"voice\": \"default\"\n                }\n            )\n    \n            # Second request with different voice\n            response2 = client.post(\n                \"/mobile-api/speak\",\n                json={\n                    \"text\": test_text,\n                    \"language\": \"en-US\",\n                    \"voice\": \"voice_2\"\n                }\n            )\n    \n            # Third request with different language\n            response3 = client.post(\n                \"/mobile-api/speak\",\n                json={\n                    \"text\": test_text,\n                    \"language\": \"ar\",\n                    \"voice\": \"default\"\n                }\n            )\n    \n            # Verify all got different cache entries\n            result1 = json.loads(response1.data)\n            result2 = json.loads(response2.data)\n            result3 = json.loads(response3.data)\n    \n>           assert result1.get(\"audio_path\") != result2.get(\"audio_path\")\nE           assert None != None\nE            +  where None = <built-in method get of dict object at 0x7fb318132880>('audio_path')\nE            +    where <built-in method get of dict object at 0x7fb318132880> = {'error': 'Failed to generate speech', 'error_details': \"test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\", 'provider_status': {'elevenlabs': True, 'gtts': True}, 'success': False}.get\nE            +  and   None = <built-in method get of dict object at 0x7fb318130280>('audio_path')\nE            +    where <built-in method get of dict object at 0x7fb318130280> = {'error': 'Failed to generate speech', 'error_details': \"test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\", 'provider_status': {'elevenlabs': True, 'gtts': True}, 'success': False}.get\n\ntests/test_api_caching.py:273: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/speak\n\ud83d\udd0d Request to: /mobile-api/speak\n\ud83d\udd0d Request to: /mobile-api/speak\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:37:31,614 - mobile_api_routes - INFO - Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=en-US\n2025-04-03 19:37:31,761 - mobile_api_routes - ERROR - Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n2025-04-03 19:37:31,766 - mobile_api_routes - ERROR - Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n\n2025-04-03 19:37:31,769 - mobile_api_routes - INFO - Mobile API: TTS Request: text='Test voice parameter variation...', voice=voice_2, language=en-US\n2025-04-03 19:37:31,769 - mobile_api_routes - ERROR - Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n2025-04-03 19:37:31,770 - mobile_api_routes - ERROR - Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n\n2025-04-03 19:37:31,773 - mobile_api_routes - INFO - Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=ar\n2025-04-03 19:37:31,920 - mobile_api_routes - ERROR - Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n2025-04-03 19:37:31,922 - mobile_api_routes - ERROR - Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n\n------------------------------ Captured log call -------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=en-US\nERROR    mobile_api_routes:mobile_api_routes.py:657 Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\nERROR    mobile_api_routes:mobile_api_routes.py:658 Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=voice_2, language=en-US\nERROR    mobile_api_routes:mobile_api_routes.py:657 Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\nERROR    mobile_api_routes:mobile_api_routes.py:658 Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n\nINFO     mobile_api_routes:mobile_api_routes.py:556 Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=ar\nERROR    mobile_api_routes:mobile_api_routes.py:657 Mobile API: TTS error: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\nERROR    mobile_api_routes:mobile_api_routes.py:658 Traceback (most recent call last):\n  File \"/home/runner/workspace/mobile_api_routes.py\", line 577, in mobile_speak\n    audio_path = tts_manager.generate_tts(text, voice=voice, language=language)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1124, in __call__\n    return self._mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1128, in _mock_call\n    return self._execute_mock_call(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/nix/store/clx0mcir7qw8zk36zbr4jra789g3knf6-python3-3.11.10/lib/python3.11/unittest/mock.py\", line 1189, in _execute_mock_call\n    result = effect(*args, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^\nTypeError: test_speak_different_voice_parameters.<locals>.mock_generate_tts() got an unexpected keyword argument 'voice'\n__________________________ test_cache_error_handling ___________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fb318745810>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fb31870f7e0>\napp = <Flask 'main'>\n\n    def test_cache_error_handling(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests error handling in the caching mechanism.\"\"\"\n        clear_cache()\n    \n        # Mock db_manager's get_cached_response to raise an exception\n        with patch('database.db_manager.DatabaseManager.get_cached_response') as mock_get_cache:\n            mock_get_cache.side_effect = Exception(\"Simulated database error\")\n    \n            # Setup mock for emotion analysis to proceed despite cache error\n            with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n                mock_analyze.return_value = create_mock_emotion_result()\n    \n                # Request should proceed despite cache error\n                response = client.post(\n                    \"/mobile-api/analyze-emotion\",\n                    json={\"text\": \"Testing error handling\", \"language\": \"en\"}\n                )\n    \n                # Verify response\n                assert response.status_code == 200\n                result = json.loads(response.data)\n                assert result.get(\"success\") is True\n    \n                # Cache status should indicate an issue\n>               assert result.get(\"cache_status\") == \"error\"\nE               AssertionError: assert 'miss' == 'error'\nE                 \nE                 - error\nE                 + miss\n\ntests/test_api_caching.py:304: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:37:31,940 - mobile_api_routes - WARNING - Failed to process cached result: Simulated database error\n2025-04-03 19:37:31,941 - mobile_api_routes - INFO - Created new mobile session: 55c31a1b-49d5-4d95-addc-2d738b6ecabc (mobile app: False)\n2025-04-03 19:37:31,941 - mobile_api_routes - INFO - Mobile API: Emotion analysis request: 'Testing error handli...' in en\n------------------------------ Captured log call -------------------------------\nWARNING  mobile_api_routes:mobile_api_routes.py:266 Failed to process cached result: Simulated database error\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 55c31a1b-49d5-4d95-addc-2d738b6ecabc (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing error handli...' in en\n___________________________ test_cache_invalidation ____________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fb3181a07d0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fb3187407c0>\napp = <Flask 'main'>\nadd_test_cache_entry = <function add_test_cache_entry.<locals>._add_entry at 0x7fb318740180>\n\n    def test_cache_invalidation(client: FlaskClient, db_session: Session, clear_cache, app: Flask, add_test_cache_entry):\n        \"\"\"Tests that cache entries can be invalidated programmatically.\"\"\"\n        clear_cache()\n    \n        # Create some test cache entries\n        add_test_cache_entry(\"test_cache_key_1\", json.dumps({\"data\": \"value1\"}))\n        add_test_cache_entry(\"test_cache_key_2\", json.dumps({\"data\": \"value2\"}))\n        add_test_cache_entry(\"different_prefix_1\", json.dumps({\"data\": \"other\"}))\n    \n        # Verify entries exist\n        assert get_cache_entry(db_session, \"test_cache_key_1\") is not None\n        assert get_cache_entry(db_session, \"test_cache_key_2\") is not None\n        assert get_cache_entry(db_session, \"different_prefix_1\") is not None\n    \n        # Use db_manager to invalidate specific entry\n        with app.app_context():\n>           from database.db_manager import db_manager\nE           ImportError: cannot import name 'db_manager' from 'database.db_manager' (/home/runner/workspace/database/db_manager.py)\n\ntests/test_api_caching.py:346: ImportError\n________________________ test_cache_hit_count_tracking _________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7fb3181400d0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7fb3187c74c0>\napp = <Flask 'main'>\n\n    def test_cache_hit_count_tracking(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that cache hit counts are properly tracked.\"\"\"\n        clear_cache()\n    \n        test_text = \"Tracking cache hit counts\"\n    \n        # Setup mock for emotion analysis\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            mock_analyze.return_value = create_mock_emotion_result()\n    \n            # First request to populate cache\n            client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n    \n            # Find the cache entry\n            import hashlib\n            normalized_text = test_text.strip().lower()\n            cache_key = f\"emotion_{hashlib.md5(normalized_text.encode()).hexdigest()}_en\"\n    \n            # Check initial hit count\n            cache_entry = get_cache_entry(db_session, cache_key)\n>           assert cache_entry is not None\nE           assert None is not None\n\ntests/test_api_caching.py:425: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:37:32,571 - mobile_api_routes - INFO - Created new mobile session: bff86773-e7f7-4aac-a5d4-a7e593a7e468 (mobile app: False)\n2025-04-03 19:37:32,571 - mobile_api_routes - INFO - Mobile API: Emotion analysis request: 'Tracking cache hit c...' in en\n------------------------------ Captured log call -------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: bff86773-e7f7-4aac-a5d4-a7e593a7e468 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Tracking cache hit c...' in en\n=============================== warnings summary ===============================\ndatabase/models.py:7\n  /home/runner/workspace/database/models.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_api_caching.py::test_analyze_emotion_cache_expiration - Ass...\nFAILED tests/test_api_caching.py::test_speak_cache_hit - assert 500 == 200\nFAILED tests/test_api_caching.py::test_speak_different_voice_parameters - ass...\nFAILED tests/test_api_caching.py::test_cache_error_handling - AssertionError:...\nFAILED tests/test_api_caching.py::test_cache_invalidation - ImportError: cann...\nFAILED tests/test_api_caching.py::test_cache_hit_count_tracking - assert None...\n==================== 6 failed, 3 passed, 1 warning in 1.58s ====================\n"
}