{
  "timestamp": "2025-04-03T20:21:32.396719",
  "execution_time_seconds": 5.495535135269165,
  "exit_code": 1,
  "passed": false,
  "raw_output": "============================= test session starts ==============================\nplatform linux -- Python 3.11.10, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/workspace\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, mock-3.14.0, flask-1.3.0\ncollecting ... collected 1 item\n\ntests/test_api_caching.py::test_cache_hit_count_tracking_minimal \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 5c11f51d-6135-4a69-be3e-e3c9f4f3c212 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'CacheHitTest_1743711...' in en\nFAILED                                                                   [100%]\n\n=================================== FAILURES ===================================\n____________________ test_cache_hit_count_tracking_minimal _____________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f42fffd2210>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f42fffd5120>\napp = <Flask 'main'>\n\n    def test_cache_hit_count_tracking_minimal(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"A minimal test that solely focuses on verifying cache hit count increments.\"\"\"\n        logging.getLogger().setLevel(logging.DEBUG)\n        print(\"\\n===== Starting test_cache_hit_count_tracking_minimal =====\")\n    \n        with app.app_context():\n            try:\n                # Log crucial table name information\n                print(\"\\n----- Cache Table Information -----\")\n                print(f\"Cache model class: {Cache.__name__}\")\n                print(f\"Cache model tablename: {Cache.__tablename__}\")\n    \n                # Step 1: Ensure we have a clean database state\n                clear_cache()\n                db_session.commit()\n    \n                # Verify cache table is empty\n                cache_count = db_session.query(Cache).count()\n                assert cache_count == 0, f\"Expected empty cache at start of test, but found {cache_count} entries\"\n                print(f\"Verified cache is empty: {cache_count} entries\")\n    \n                # Step 2: Create a specific test text to make debugging easier\n                test_text = f\"CacheHitTest_{int(time.time())}\"  # Use integer timestamp for more consistent hashing\n                print(f\"Using test text: '{test_text}'\")\n    \n                # Pre-compute expected cache key - output exact details to verify\n                normalized_text = test_text.strip().lower()\n                print(f\"Normalized text: '{normalized_text}'\")\n    \n                import hashlib\n                text_hash = hashlib.md5(normalized_text.encode()).hexdigest()\n                print(f\"MD5 hash: '{text_hash}'\")\n    \n                expected_cache_key = f\"emotion_{text_hash}_en\"\n                print(f\"Expected cache key: '{expected_cache_key}'\")\n    \n                # Mock the emotion analysis to return a predictable result\n                with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n                    # Configure mock with a well-defined response\n                    mock_analyze.return_value = {\n                        \"primary_emotion\": \"happy\",\n                        \"confidence\": 0.9,\n                        \"emotions\": {\n                            \"happy\": 0.9,\n                            \"neutral\": 0.1\n                        }\n                    }\n    \n                    # First request to create cache entry\n                    print(\"\\n----- First API request (create cache entry) -----\")\n                    response1 = client.post(\n                        \"/mobile-api/analyze-emotion\",\n                        json={\"text\": test_text, \"language\": \"en\", \"include_details\": \"true\"}\n                    )\n                    result1 = json.loads(response1.data)\n    \n                    print(f\"Response status: {response1.status_code}\")\n                    print(f\"Response: {json.dumps(result1, indent=2)}\")\n                    print(f\"Cache status: {result1.get('cache_status')}\")\n    \n                    assert response1.status_code == 200, f\"Expected 200 response, got {response1.status_code}\"\n                    assert result1.get(\"success\") is True, \"Expected success=True\"\n                    assert result1.get(\"cache_status\") == \"miss\", f\"Expected cache_status='miss', got '{result1.get('cache_status')}'\"\n    \n                    # Verify cache entry was created - crucially using the right model/table\n                    db_session.commit()  # Ensure transaction is committed\n    \n                    # Diagnostic query - look at ALL entries\n                    print(\"\\n----- Examine cache table after first request -----\")\n                    all_entries = db_session.query(Cache).all()\n                    print(f\"Found {len(all_entries)} total cache entries\")\n    \n                    for entry in all_entries:\n                        print(f\"  Key: '{entry.key}'\")\n                        print(f\"  Hit count: {entry.hit_count}\")\n                        print(f\"  Created at: {entry.created_at}\")\n                        try:\n                            value = json.loads(entry.value)\n                            print(f\"  Value: {json.dumps(value, indent=2)}\")\n                        except:\n                            print(f\"  Value: <not JSON>\")\n                        print()\n    \n                    # Try to locate our specific entry\n                    cache_entry = db_session.query(Cache).filter(Cache.key == expected_cache_key).first()\n                    print(f\"Found our specific cache entry: {cache_entry is not None}\")\n    \n                    if cache_entry is None:\n                        # Try a direct SQL query to check the database\n                        try:\n                            from sqlalchemy import text\n                            result = db_session.execute(text(f\"SELECT * FROM {Cache.__tablename__} WHERE key = :key\"),\n                                                       {'key': expected_cache_key})\n                            rows = result.fetchall()\n                            print(f\"Raw SQL query found {len(rows)} matching rows\")\n                            for row in rows:\n                                print(f\"  Row: {row}\")\n                        except Exception as e:\n                            print(f\"SQL query error: {str(e)}\")\n    \n                        # Check if any keys in the cache table contain our test text\n                        for entry in all_entries:\n                            if test_text.lower() in entry.key.lower():\n                                print(f\"Found potential match: {entry.key}\")\n    \n                        # Create entry directly using db_manager\n                        from main import db_manager\n                        print(\"\\n----- Attempting direct cache entry creation -----\")\n                        cache_data = {\n                            \"primary_emotion\": \"happy\",\n                            \"confidence\": 0.9,\n                            \"emotions\": {\"happy\": 0.9, \"neutral\": 0.1},\n                            \"language\": \"en\"\n                        }\n                        db_manager.store_cached_response(\n                            expected_cache_key,\n                            json.dumps(cache_data),\n                            expiry_seconds=300\n                        )\n                        db_session.commit()\n    \n                        # Try to find it again\n                        cache_entry = db_session.query(Cache).filter(Cache.key == expected_cache_key).first()\n                        print(f\"Direct creation successful: {cache_entry is not None}\")\n    \n>                   assert cache_entry is not None, \"Failed to create or find initial cache entry\"\nE                   AssertionError: Failed to create or find initial cache entry\nE                   assert None is not None\n\ntests/test_api_caching.py:794: AssertionError\n---------------------------- Captured stdout setup -----------------------------\nCreated tables: settings, emotion_data, faces, recognition_history, voice_logs, response_cache\n----------------------------- Captured stdout call -----------------------------\n\n===== Starting test_cache_hit_count_tracking_minimal =====\n\n----- Cache Table Information -----\nCache model class: Cache\nCache model tablename: response_cache\nCache table cleared - all entries deleted and committed\nCache entries after clearing: 0\nVerified cache is empty: 0 entries\nUsing test text: 'CacheHitTest_1743711691'\nNormalized text: 'cachehittest_1743711691'\nMD5 hash: '86efe4d6a102b067c24f701ebdf02b05'\nExpected cache key: 'emotion_86efe4d6a102b067c24f701ebdf02b05_en'\n\n----- First API request (create cache entry) -----\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n\n===== ANALYZE EMOTION API CALLED =====\nRequest method: POST\nDEBUG: Normalized text: 'cachehittest_1743711691'\nDEBUG: Generated cache key: 'emotion_86efe4d6a102b067c24f701ebdf02b05_en'\nDEBUG: Bypass cache: False\nDEBUG: Storing in cache, bypass_cache=False, db_manager exists=True\nDEBUG: cache_data prepared: {\"primary_emotion\": \"happy\", \"confidence\": 0.9, \"emotions\": {\"happy\": 0.9, \"neutral\": 0.1}, \"language\": \"en\", \"timestamp\": \"2025-04-03T20:21:31Z\"}\nDEBUG: cache_key for storage: emotion_86efe4d6a102b067c24f701ebdf02b05_en\nDEBUG: Cache storage result: True\nDEBUG: Cache entry after storage: True\nDEBUG: Cache key: emotion_86efe4d6a102b067c24f701ebdf02b05_en, Created: 2025-04-03 20:21:31, Hit count: 0\nResponse status: 200\nResponse: {\n  \"cache_status\": \"miss\",\n  \"processing_time_ms\": 31,\n  \"result\": {\n    \"emotions\": {\n      \"happy\": 0.9,\n      \"neutral\": 0.1\n    },\n    \"intensity\": 0.9,\n    \"metadata\": {\n      \"confidence\": 0.9,\n      \"language\": \"en\",\n      \"processing_time_ms\": 31,\n      \"source\": \"emotion-analysis-v2\"\n    },\n    \"primary_emotion\": \"happy\",\n    \"timestamp\": \"2025-04-03T20:21:32Z\"\n  },\n  \"success\": true\n}\nCache status: miss\n\n----- Examine cache table after first request -----\nFound 0 total cache entries\nFound our specific cache entry: False\nRaw SQL query found 0 matching rows\n\n----- Attempting direct cache entry creation -----\nDirect creation successful: False\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 20:21:31,981 - mobile_api_routes - INFO - Created new mobile session: 5c11f51d-6135-4a69-be3e-e3c9f4f3c212 (mobile app: False)\n2025-04-03 20:21:31,982 - mobile_api_routes - INFO - Mobile API: Emotion analysis request: 'CacheHitTest_1743711...' in en\n2025-04-03 20:21:32,008 - database.db_manager - DEBUG - Cached response stored with key 'emotion_86efe4d6a102b067c24f701ebdf02b05_en', expires in 259200s\n2025-04-03 20:21:32,009 - mobile_api_routes - DEBUG - Cached emotion analysis for key: emotion_86efe4d6a102b067c24f701ebdf02b05_en\n2025-04-03 20:21:32,033 - database.db_manager - DEBUG - Cached response stored with key 'emotion_86efe4d6a102b067c24f701ebdf02b05_en', expires in 300s\n------------------------------ Captured log call -------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 5c11f51d-6135-4a69-be3e-e3c9f4f3c212 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'CacheHitTest_1743711...' in en\nDEBUG    database.db_manager:db_manager.py:462 Cached response stored with key 'emotion_86efe4d6a102b067c24f701ebdf02b05_en', expires in 259200s\nDEBUG    mobile_api_routes:mobile_api_routes.py:348 Cached emotion analysis for key: emotion_86efe4d6a102b067c24f701ebdf02b05_en\nDEBUG    database.db_manager:db_manager.py:462 Cached response stored with key 'emotion_86efe4d6a102b067c24f701ebdf02b05_en', expires in 300s\n=============================== warnings summary ===============================\ndatabase/models.py:7\n  /home/runner/workspace/database/models.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_api_caching.py::test_cache_hit_count_tracking_minimal - Ass...\n========================= 1 failed, 1 warning in 0.21s =========================\n"
}