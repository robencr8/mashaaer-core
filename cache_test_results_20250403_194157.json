{
  "timestamp": "2025-04-03T19:41:57.069823",
  "execution_time_seconds": 5.7027809619903564,
  "exit_code": 1,
  "passed": false,
  "raw_output": "============================= test session starts ==============================\nplatform linux -- Python 3.11.10, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/workspace\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, mock-3.14.0, flask-1.3.0\ncollecting ... collected 9 items\n\ntests/test_api_caching.py::test_analyze_emotion_cache_hit FAILED         [ 11%]\ntests/test_api_caching.py::test_analyze_emotion_bypass_cache FAILED      [ 22%]\ntests/test_api_caching.py::test_analyze_emotion_cache_expiration FAILED  [ 33%]\ntests/test_api_caching.py::test_speak_cache_hit \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/test_speech.mp3\nFAILED                                                                   [ 44%]\ntests/test_api_caching.py::test_speak_different_voice_parameters \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/default_en-US.mp3\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/voice_2_en-US.mp3\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/default_ar.mp3\nFAILED                                                                   [ 55%]\ntests/test_api_caching.py::test_cache_error_handling \n-------------------------------- live log call ---------------------------------\nWARNING  mobile_api_routes:mobile_api_routes.py:266 Failed to process cached result: Simulated database error\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: e4c1b296-abf7-475d-b3b1-0e11f5d9f1d7 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing error handli...' in en\nFAILED                                                                   [ 66%]\ntests/test_api_caching.py::test_cache_invalidation FAILED                [ 77%]\ntests/test_api_caching.py::test_performance_metrics FAILED               [ 88%]\ntests/test_api_caching.py::test_cache_hit_count_tracking FAILED          [100%]\n\n=================================== FAILURES ===================================\n________________________ test_analyze_emotion_cache_hit ________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febac5d0610>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febac5d51c0>\napp = <Flask 'main'>\n\n    def test_analyze_emotion_cache_hit(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the emotion analysis endpoint correctly uses cache.\"\"\"\n        clear_cache()\n    \n        # Add debug prints to help us understand the test flow\n        print(\"\\n--- Starting test_analyze_emotion_cache_hit ---\")\n    \n        # Setup mock for emotion analysis\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            # Configure the mock to return a standard result\n            mock_result = create_mock_emotion_result()\n            print(f\"Mock result: {mock_result}\")\n            mock_analyze.return_value = mock_result\n    \n            # First request - should miss cache and call analyze_text\n            print(\"Making first request - should miss cache\")\n            response = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": \"I am feeling happy today\", \"language\": \"en\"}\n            )\n    \n            # Verify first response\n            print(f\"First response status code: {response.status_code}\")\n            result = json.loads(response.data)\n            print(f\"First response data: {result}\")\n            assert response.status_code == 200\n            assert result.get(\"success\") is True\n    \n            # More relaxed assertion for cache_status in case it's not present in the response\n            cache_status = result.get(\"cache_status\")\n            print(f\"Cache status in first response: {cache_status}\")\n>           assert cache_status in [\"miss\", None], f\"Expected cache_status to be 'miss' or None, got {cache_status}\"\nE           AssertionError: Expected cache_status to be 'miss' or None, got hit\nE           assert 'hit' in ['miss', None]\n\ntests/test_api_caching.py:77: AssertionError\n---------------------------- Captured stdout setup -----------------------------\nCreated tables: settings, emotion_data, faces, recognition_history, voice_logs, response_cache\n----------------------------- Captured stdout call -----------------------------\n\n--- Starting test_analyze_emotion_cache_hit ---\nMock result: {'primary_emotion': 'happy', 'emotions': {'happy': 0.8, 'neutral': 0.2}, 'intensity': 0.8, 'metadata': {'source': 'test-emotion-analyzer', 'confidence': 0.9}, 'timestamp': '2025-04-03T19:41:56Z'}\nMaking first request - should miss cache\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\nFirst response status code: 200\nFirst response data: {'cache_status': 'hit', 'processing_time_ms': 78, 'result': {'emotions': {'happy': 0.8, 'neutral': 0.2}, 'intensity': 0.8, 'metadata': {'cache_created_at': '2025-04-03T19:37:31', 'cache_expires_at': '2025-04-06T19:37:31.101008', 'cache_hit_count': 6, 'confidence': 0.8, 'language': 'en', 'processing_time_ms': 0, 'source': 'emotion-analysis-v2'}, 'primary_emotion': 'happy', 'timestamp': '2025-04-03T19:41:56Z'}, 'success': True}\nCache status in first response: hit\n______________________ test_analyze_emotion_bypass_cache _______________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febac5ca0d0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febab170ea0>\napp = <Flask 'main'>\n\n    def test_analyze_emotion_bypass_cache(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the bypass_cache parameter correctly skips the cache.\"\"\"\n        clear_cache()\n    \n        # Setup mock for emotion analysis\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            # Configure the mock to return a standard result\n            mock_analyze.return_value = create_mock_emotion_result()\n    \n            # First request - normal caching behavior\n            response = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": \"Testing bypass cache\", \"language\": \"en\"}\n            )\n    \n            # Verify first response\n            assert response.status_code == 200\n>           assert mock_analyze.call_count == 1\nE           AssertionError: assert 0 == 1\nE            +  where 0 = <MagicMock name='analyze_text' id='140650185798544'>.call_count\n\ntests/test_api_caching.py:147: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n____________________ test_analyze_emotion_cache_expiration _____________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febaab59950>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febab10ce00>\napp = <Flask 'main'>\n\n    def test_analyze_emotion_cache_expiration(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that cached entries expire correctly and are refreshed.\"\"\"\n        clear_cache()\n    \n        # For this test, we'll use a direct approach instead of manually creating a cache entry\n        test_text = \"This text is for testing cache expiration\"\n    \n        # Setup mock for emotion analysis to return different results on subsequent calls\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            # First call returns \"happy\"\n            mock_analyze.return_value = create_mock_emotion_result(test_text, \"happy\")\n    \n            # First request - creates cache entry with \"happy\"\n            response = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n    \n            # Verify first response\n            assert response.status_code == 200\n            result = json.loads(response.data)\n            assert result.get(\"success\") is True\n            assert result.get(\"result\", {}).get(\"primary_emotion\") == \"happy\"\n>           assert mock_analyze.call_count == 1\nE           AssertionError: assert 0 == 1\nE            +  where 0 = <MagicMock name='analyze_text' id='140650685477008'>.call_count\n\ntests/test_api_caching.py:190: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n_____________________________ test_speak_cache_hit _____________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febab1ba3d0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febab173240>\napp = <Flask 'main'>\n\n    def test_speak_cache_hit(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the TTS endpoint correctly uses cache.\"\"\"\n        clear_cache()\n    \n        # Create an actual file for the mock to return\n        import os\n        test_file_path = \"tts_cache/test_speech.mp3\"\n        os.makedirs(os.path.dirname(test_file_path), exist_ok=True)\n    \n        # Create a dummy file\n        with open(test_file_path, 'w') as f:\n            f.write(\"dummy audio content\")\n    \n        try:\n            # Setup mock for TTS generation\n            with patch('tts.tts_manager.TTSManager.generate_tts') as mock_tts:\n                # Configure the mock to return a file path\n                mock_tts.return_value = test_file_path\n    \n                # First request - should miss cache\n                response = client.post(\n                    \"/mobile-api/speak\",\n                    json={\n                        \"text\": \"This is a test of text to speech caching\",\n                        \"language\": \"en-US\",\n                        \"voice\": \"default\"\n                    }\n                )\n    \n                # Verify first response\n                assert response.status_code == 200\n                result = json.loads(response.data)\n                assert result.get(\"success\") is True\n                # Cache status might be miss or unspecified\n                if \"cache_status\" in result:\n>                   assert result.get(\"cache_status\") in [\"miss\", None]\nE                   AssertionError: assert 'hit' in ['miss', None]\nE                    +  where 'hit' = <built-in method get of dict object at 0x7febab17da80>('cache_status')\nE                    +    where <built-in method get of dict object at 0x7febab17da80> = {'audio_path': 'tts_cache/test_speech.mp3', 'cache_metadata': {'created_at': '2025-04-03T19:39:31', 'expires_at': '2025-04-10T19:39:31.647629', 'hit_count': 3}, 'cache_status': 'hit', 'language': 'en-US', ...}.get\n\ntests/test_api_caching.py:256: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/speak\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:41:56,488 - mobile_api_routes - INFO - Mobile API: Using cached TTS audio: tts_cache/test_speech.mp3\n------------------------------ Captured log call -------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/test_speech.mp3\n____________________ test_speak_different_voice_parameters _____________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febaab4a710>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febab172f20>\napp = <Flask 'main'>\n\n    def test_speak_different_voice_parameters(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the TTS endpoint creates different cache entries for different voices.\"\"\"\n        clear_cache()\n    \n        test_text = \"Test voice parameter variations\"\n    \n        # Create an actual file directory for the mock to return files\n        import os\n        os.makedirs(\"tts_cache\", exist_ok=True)\n    \n        # Create test files\n        test_files = [\n            \"tts_cache/default_en-US.mp3\",\n            \"tts_cache/voice_2_en-US.mp3\",\n            \"tts_cache/default_ar.mp3\"\n        ]\n    \n        try:\n            # Create dummy files\n            for file_path in test_files:\n                with open(file_path, 'w') as f:\n                    f.write(\"dummy audio content\")\n    \n            # Setup mock for TTS generation\n            with patch('tts.tts_manager.TTSManager.generate_tts') as mock_tts:\n                # Configure the mock to return different paths for different voices\n                def mock_generate_tts(text, voice=None, language=None):\n                    if voice == \"voice_2\":\n                        return \"tts_cache/voice_2_en-US.mp3\"\n                    elif language == \"ar\":\n                        return \"tts_cache/default_ar.mp3\"\n                    else:\n                        return \"tts_cache/default_en-US.mp3\"\n    \n                mock_tts.side_effect = mock_generate_tts\n    \n                # First request with default voice\n                response1 = client.post(\n                    \"/mobile-api/speak\",\n                    json={\n                        \"text\": test_text,\n                        \"language\": \"en-US\",\n                        \"voice\": \"default\"\n                    }\n                )\n    \n                # Second request with different voice\n                response2 = client.post(\n                    \"/mobile-api/speak\",\n                    json={\n                        \"text\": test_text,\n                        \"language\": \"en-US\",\n                        \"voice\": \"voice_2\"\n                    }\n                )\n    \n                # Third request with different language\n                response3 = client.post(\n                    \"/mobile-api/speak\",\n                    json={\n                        \"text\": test_text,\n                        \"language\": \"ar\",\n                        \"voice\": \"default\"\n                    }\n                )\n    \n                # Verify all got different cache entries\n                result1 = json.loads(response1.data)\n                result2 = json.loads(response2.data)\n                result3 = json.loads(response3.data)\n    \n                assert result1.get(\"audio_path\") != result2.get(\"audio_path\")\n                assert result1.get(\"audio_path\") != result3.get(\"audio_path\")\n                assert result2.get(\"audio_path\") != result3.get(\"audio_path\")\n    \n                # Verify TTS generation was called for each unique parameter set\n>               assert mock_tts.call_count == 3\nE               AssertionError: assert 0 == 3\nE                +  where 0 = <MagicMock name='generate_tts' id='140650158012816'>.call_count\n\ntests/test_api_caching.py:364: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/speak\n\ud83d\udd0d Request to: /mobile-api/speak\n\ud83d\udd0d Request to: /mobile-api/speak\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:41:56,530 - mobile_api_routes - INFO - Mobile API: Using cached TTS audio: tts_cache/default_en-US.mp3\n2025-04-03 19:41:56,569 - mobile_api_routes - INFO - Mobile API: Using cached TTS audio: tts_cache/voice_2_en-US.mp3\n2025-04-03 19:41:56,590 - mobile_api_routes - INFO - Mobile API: Using cached TTS audio: tts_cache/default_ar.mp3\n------------------------------ Captured log call -------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/default_en-US.mp3\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/voice_2_en-US.mp3\nINFO     mobile_api_routes:mobile_api_routes.py:489 Mobile API: Using cached TTS audio: tts_cache/default_ar.mp3\n__________________________ test_cache_error_handling ___________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febaab49bd0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febab170fe0>\napp = <Flask 'main'>\n\n    def test_cache_error_handling(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests error handling in the caching mechanism.\"\"\"\n        clear_cache()\n    \n        # Mock db_manager's get_cached_response to raise an exception\n        with patch('database.db_manager.DatabaseManager.get_cached_response') as mock_get_cache:\n            mock_get_cache.side_effect = Exception(\"Simulated database error\")\n    \n            # Setup mock for emotion analysis to proceed despite cache error\n            with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n                mock_analyze.return_value = create_mock_emotion_result()\n    \n                # Request should proceed despite cache error\n                response = client.post(\n                    \"/mobile-api/analyze-emotion\",\n                    json={\"text\": \"Testing error handling\", \"language\": \"en\"}\n                )\n    \n                # Verify response\n                assert response.status_code == 200\n                result = json.loads(response.data)\n                assert result.get(\"success\") is True\n    \n                # Cache status should indicate an issue\n>               assert result.get(\"cache_status\") == \"error\"\nE               AssertionError: assert 'miss' == 'error'\nE                 \nE                 - error\nE                 + miss\n\ntests/test_api_caching.py:395: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 19:41:56,609 - mobile_api_routes - WARNING - Failed to process cached result: Simulated database error\n2025-04-03 19:41:56,609 - mobile_api_routes - INFO - Created new mobile session: e4c1b296-abf7-475d-b3b1-0e11f5d9f1d7 (mobile app: False)\n2025-04-03 19:41:56,609 - mobile_api_routes - INFO - Mobile API: Emotion analysis request: 'Testing error handli...' in en\n------------------------------ Captured log call -------------------------------\nWARNING  mobile_api_routes:mobile_api_routes.py:266 Failed to process cached result: Simulated database error\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: e4c1b296-abf7-475d-b3b1-0e11f5d9f1d7 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:284 Mobile API: Emotion analysis request: 'Testing error handli...' in en\n___________________________ test_cache_invalidation ____________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febac5e4390>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febab1719e0>\napp = <Flask 'main'>\nadd_test_cache_entry = <function add_test_cache_entry.<locals>._add_entry at 0x7febab1722a0>\n\n    def test_cache_invalidation(client: FlaskClient, db_session: Session, clear_cache, app: Flask, add_test_cache_entry):\n        \"\"\"Tests that cache entries can be invalidated programmatically.\"\"\"\n        clear_cache()\n    \n        # Create some test cache entries\n        add_test_cache_entry(\"test_cache_key_1\", json.dumps({\"data\": \"value1\"}))\n        add_test_cache_entry(\"test_cache_key_2\", json.dumps({\"data\": \"value2\"}))\n        add_test_cache_entry(\"different_prefix_1\", json.dumps({\"data\": \"other\"}))\n    \n        # Verify entries exist\n        assert get_cache_entry(db_session, \"test_cache_key_1\") is not None\n        assert get_cache_entry(db_session, \"test_cache_key_2\") is not None\n        assert get_cache_entry(db_session, \"different_prefix_1\") is not None\n    \n        # Use db_manager to invalidate specific entry\n        with app.app_context():\n>           from database.db_manager import db_manager\nE           ImportError: cannot import name 'db_manager' from 'database.db_manager' (/home/runner/workspace/database/db_manager.py)\n\ntests/test_api_caching.py:437: ImportError\n___________________________ test_performance_metrics ___________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febaab81b90>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febab172340>\napp = <Flask 'main'>\n\n    def test_performance_metrics(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that caching improves performance.\"\"\"\n        clear_cache()\n    \n        test_text = \"Performance testing with a longer text to analyze the sentiment and emotion of this passage.\"\n    \n        # Setup a slow emotion analysis mock to simulate computational cost\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            def slow_analyze(*args, **kwargs):\n                time.sleep(0.5)  # Simulate processing delay\n                return create_mock_emotion_result()\n    \n            mock_analyze.side_effect = slow_analyze\n    \n            # First request - should be slow due to analysis\n            start_time = time.time()\n            response1 = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n            first_request_time = time.time() - start_time\n    \n            # Second request - should be fast due to cache\n            start_time = time.time()\n            response2 = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n            second_request_time = time.time() - start_time\n    \n            # Verify timing improved significantly\n            assert second_request_time < first_request_time\n            assert second_request_time < 0.1  # Should be very fast for cache hit\n    \n            # Calculate and log performance improvement\n            improvement = (first_request_time - second_request_time) / first_request_time * 100\n            print(f\"Performance improvement: {improvement:.2f}% faster with cache\")\n>           assert improvement > 80  # Cache should be at least 80% faster\nE           assert 14.54246633442901 > 80\n\ntests/test_api_caching.py:491: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\nPerformance improvement: 14.54% faster with cache\n________________________ test_cache_hit_count_tracking _________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7febab119310>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7febab173e20>\napp = <Flask 'main'>\n\n    def test_cache_hit_count_tracking(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that cache hit counts are properly tracked.\"\"\"\n        clear_cache()\n    \n        test_text = \"Tracking cache hit counts\"\n    \n        # Setup mock for emotion analysis\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            mock_analyze.return_value = create_mock_emotion_result()\n    \n            # First request to populate cache\n            client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n    \n            # Find the cache entry\n            import hashlib\n            normalized_text = test_text.strip().lower()\n            cache_key = f\"emotion_{hashlib.md5(normalized_text.encode()).hexdigest()}_en\"\n    \n            # Check initial hit count\n            cache_entry = get_cache_entry(db_session, cache_key)\n>           assert cache_entry is not None\nE           assert None is not None\n\ntests/test_api_caching.py:516: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n=============================== warnings summary ===============================\ndatabase/models.py:7\n  /home/runner/workspace/database/models.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_api_caching.py::test_analyze_emotion_cache_hit - AssertionE...\nFAILED tests/test_api_caching.py::test_analyze_emotion_bypass_cache - Asserti...\nFAILED tests/test_api_caching.py::test_analyze_emotion_cache_expiration - Ass...\nFAILED tests/test_api_caching.py::test_speak_cache_hit - AssertionError: asse...\nFAILED tests/test_api_caching.py::test_speak_different_voice_parameters - Ass...\nFAILED tests/test_api_caching.py::test_cache_error_handling - AssertionError:...\nFAILED tests/test_api_caching.py::test_cache_invalidation - ImportError: cann...\nFAILED tests/test_api_caching.py::test_performance_metrics - assert 14.542466...\nFAILED tests/test_api_caching.py::test_cache_hit_count_tracking - assert None...\n========================= 9 failed, 1 warning in 0.60s =========================\n"
}