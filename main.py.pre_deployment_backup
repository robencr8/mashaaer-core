"""
Mashaaer Feelings - AI Emotional Companion Application

A bilingual (Arabic/English) AI emotional companion that recognizes and responds
to users' emotions through text, voice, and visual inputs.

Core Components:
- Emotion analysis with personalized responses
- Text-to-speech with multi-layered fallback system
- Voice recognition with context-aware responses
- Multilingual interface with cultural sensitivity
- Interactive "cosmic" onboarding experience
"""

import os
import logging
import json
import mimetypes
import traceback
import time
from flask import Flask, render_template, request, jsonify, Response, redirect, url_for, send_from_directory, make_response
from flask_cors import CORS
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
import threading

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('app.log')
    ]
)

logger = logging.getLogger(__name__)

# Load logging configuration if available
try:
    import logging.config
    import yaml
    
    if os.path.exists('logging_config.yaml'):
        with open('logging_config.yaml', 'rt') as f:
            config = yaml.safe_load(f.read())
            logging.config.dictConfig(config)
            logger.info("Loaded custom logging configuration")
except Exception as e:
    logger.warning(f"Could not configure custom logging: {str(e)}")

# Create the Flask application
app = Flask(__name__, static_folder='static')

# Import application components
from config import Config
from core_launcher import CoreLauncher
from emotion_tracker import EmotionTracker
from intent_classifier import IntentClassifier
from database.db_manager import DatabaseManager
from tts.tts_manager import TTSManager
from auto_learning import AutoLearning
from voice.recognition import VoiceRecognition
from vision.face_detector import FaceDetector
import twilio_api
import mobile_api_routes  # Mobile-optimized API routes

# Load configuration
config = Config()

# Extended CORS configuration for cross-domain compatibility
origins = [
    "https://mashaaer.replit.app",
    "https://mashaaer-feelings.replit.app", 
    "https://mashaaer-ai.replit.app",
    config.APP_URL,
    "http://localhost:5000",
    "http://127.0.0.1:5000",
    "http://localhost:3000",  # React development server
    "null"  # For file:// URLs
]

# Add Replit URLs to allowed origins
if 'REPLIT_URL' in os.environ:
    origins.append(os.environ['REPLIT_URL'])
if 'REPL_SLUG' in os.environ and 'REPL_OWNER' in os.environ:
    origins.append(f"https://{os.environ['REPL_SLUG']}.{os.environ['REPL_OWNER']}.repl.co")

CORS(app, resources={r"/*": {"origins": origins, "supports_credentials": True}})

# Initialize database
db_manager = DatabaseManager(config)

# Note: Twilio API is imported directly as needed
from profile_manager import ProfileManager
profile_manager = ProfileManager(db_manager)

# Initialize application components
emotion_tracker = EmotionTracker(db_manager)
intent_classifier = IntentClassifier()

# Text-to-speech manager
tts_manager = TTSManager(config)

# Voice recognition instance (if enabled)
voice_recognition = VoiceRecognition(config) if config.VOICE_ENABLED else None

# Face recognition instance (if enabled)
face_detector = FaceDetector(config) if config.FACE_DETECTION_ENABLED else None

# Initialize API routes
from api_routes import init_api
init_api(app, db_manager, emotion_tracker, tts_manager, voice_recognition, face_detector, intent_classifier, config, None, None, profile_manager)

# Initialize mobile API routes
from mobile_api_routes import init_mobile_api
init_mobile_api(app, db_manager, emotion_tracker, tts_manager, voice_recognition, 
               intent_classifier, config, profile_manager)

# Initialize feedback tool routes
try:
    from routes_feedback_tool import init_feedback_tool_routes
    init_feedback_tool_routes(app)
    logger.info("Feedback tool routes successfully initialized")
except Exception as e:
    logger.error(f"Error initializing feedback tool routes: {str(e)}")

# Application initialization flags
dev_mode = False

@app.route("/readme")
def readme_page():
    """Serve the readme documentation page"""
    return render_template("readme.html", config=config)

@app.route('/api/status')
def api_status():
    """API status endpoint providing system health and configuration information"""
    # Get system overview
    app_version = os.environ.get('APP_VERSION', 'dev')
    app_env = os.environ.get('APP_ENV', 'development')
    api_key_status = {
        'elevenlabs': bool(config.ELEVENLABS_API_KEY)
    }
    
    # Check TTS availability
    tts_status = "active" if tts_manager.is_primary_provider_available() else "fallback_active"
    
    # Database status
    try:
        db_status = "connected" if db_manager.check_connection() else "error"
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    # Assemble system status
    status_data = {
        'status': 'online',
        'version': app_version,
        'environment': app_env,
        'timestamp': datetime.now().isoformat(),
        'systems': {
            'database': db_status,
            'tts': tts_status,
            'voice_recognition': 'active' if voice_recognition else 'inactive',
            'face_detection': 'active' if face_detector else 'inactive',
            'api_keys': api_key_status
        }
    }
    
    response = jsonify(status_data)
    return response

@app.route('/tts_cache/<path:filename>')
def serve_tts_cache(filename):
    """Serve TTS audio files with proper MIME types and headers
    This ensures browser can properly play audio files.
    """
    logger.info(f"Serving TTS cache file: {filename}")
    cache_dir = os.path.join(os.getcwd(), 'tts_cache')
    
    # Security check to prevent directory traversal
    if '..' in filename:
        return "Invalid filename", 400
    
    # Ensure the file exists
    full_path = os.path.join(cache_dir, filename)
    if not os.path.exists(full_path):
        logger.warning(f"TTS cache file not found: {full_path}")
        return "File not found", 404
    
    # Log file information for debugging
    logger.debug(f"File exists at {full_path}, size: {os.path.getsize(full_path)} bytes")
    
    # Determine the correct MIME type
    content_type = mimetypes.guess_type(filename)[0]
    
    if not content_type:
        # Default to MP3 if MIME type can't be determined
        if filename.endswith('.mp3'):
            content_type = 'audio/mpeg'
        else:
            content_type = 'application/octet-stream'
    
    logger.debug(f"Serving {filename} with content-type: {content_type}")
    
    # Get file modification time for caching
    modified_time = os.path.getmtime(full_path)
    modified_date = datetime.fromtimestamp(modified_time).strftime('%a, %d %b %Y %H:%M:%S GMT')
    
    # Set Cache-Control header (1 day cache)
    response = send_from_directory(
        cache_dir, 
        filename, 
        mimetype=content_type, 
        as_attachment=False,
        max_age=86400
    )
    
    # Add additional headers for better caching and delivery
    response.headers['Last-Modified'] = modified_date
    response.headers['Accept-Ranges'] = 'bytes'
    
    return response

# Main application routes

# Root route is now handled by routes_feedback_tool.py to avoid conflicts
# @app.route('/')
# def index():
#     pass

@app.route('/index')
def app_index():
    """Main application index/landing page"""
    return render_template('index.html')

@app.route('/startup')
def startup():
    """Application startup/landing page"""
    return render_template('startup.html', app_url=config.APP_URL)

@app.route('/app')
def app_main():
    """Main application page after onboarding with cosmic theme"""
    return render_template('app.html', app_url=config.APP_URL)

@app.route('/user/settings')
def user_settings_page():
    """User settings page"""
    return render_template('settings.html')

@app.route('/theme2-example')
def theme2_example():
    """Example page demonstrating Theme 2: Falling Stars"""
    return render_template('theme2.html')

@app.route('/themes')
def themes_showcase():
    """Showcase of available themes"""
    return render_template('themes.html')

@app.route('/cultural-loaders')
def cultural_loaders_showcase():
    """Showcase of cultural themed loading animations"""
    return render_template('cultural_loaders.html')

@app.route('/interactive-splash')
def interactive_splash():
    """Interactive splash screen with animated cosmic sphere"""
    return render_template('interactive_splash.html')

@app.route('/api/play-cosmic-sound', methods=['POST'])
def play_cosmic_sound():
    """Play a cosmic sound effect and get voice feedback"""
    data = request.get_json()
    sound_type = data.get('type', 'welcome')
    language = data.get('language', 'en')
    
    # Generate sound and return file path
    if sound_type == 'welcome':
        # Generate welcome message in the requested language
        text = "Welcome to Mashaaer Feelings. Create the future, I'm listening." if language == 'en' else "مرحبًا بك في مشاعر. اصنع المستقبل، أنا أسمعك."
        filename = tts_manager.generate_tts(text, language)
        return jsonify({'status': 'success', 'sound_path': f'/tts_cache/{filename}'})
    else:
        return jsonify({'status': 'error', 'message': 'Invalid sound type'})

@app.route('/cosmic-onboarding')
def cosmic_onboarding():
    """Cosmic onboarding experience with voice interaction"""
    return render_template('cosmic_onboarding.html')

@app.route('/consent')
def consent():
    return render_template('consent.html')

@app.route('/voice-register')
def voice_register():
    return render_template('voice_register.html')

@app.route('/goodbye')
def goodbye():
    return render_template('goodbye.html')

@app.route('/demo')
def demo():
    return render_template('demo.html')

@app.route('/emotion-timeline')
def emotion_timeline():
    """Show the emotion analysis timeline visualization"""
    return render_template('emotion_timeline.html')

@app.route('/profile')
def profile():
    """User profile page"""
    return render_template('profile.html')

@app.route('/live-view')
def live_view():
    """Live emotion detection view with real-time analysis"""
    return render_template('live_view.html')

@app.route('/admin')
def admin():
    """Admin dashboard (requires authentication)"""
    # TODO: Add proper authentication before deployment
    return render_template('admin.html')

@app.route('/sms-notifications')
def sms_notifications():
    """SMS notification management page"""
    return render_template('sms_notifications.html')

@app.route('/session-report')
def session_report():
    """Show the session report dashboard with real-time data visualization"""
    return render_template('session_report.html')

@app.route('/download-session-csv')
def download_session_csv():
    """Download session data as CSV"""
    # Get session data from database
    try:
        sessions = db_manager.get_user_sessions()
        
        # Generate CSV content
        import csv
        from io import StringIO
        
        output = StringIO()
        writer = csv.writer(output)
        
        # Write headers
        writer.writerow(['Session ID', 'Start Time', 'End Time', 'Duration', 'Emotions Detected'])
        
        # Write data rows
        for session in sessions:
            writer.writerow([
                session['session_id'],
                session['start_time'],
                session['end_time'],
                session['duration'],
                ', '.join(session['emotions'])
            ])
            
        # Prepare response
        response = make_response(output.getvalue())
        response.headers["Content-Disposition"] = "attachment; filename=session_data.csv"
        response.headers["Content-type"] = "text/csv"
        
        return response
        
    except Exception as e:
        logger.error(f"Error generating session CSV: {str(e)}")
        return f"Error: {str(e)}", 500

@app.route('/api/speak', methods=['POST'])
def speak():
    """Generate text-to-speech audio and return the file URL
    
    Request body:
    {
        "text": "The text to convert to speech",
        "language": "en",  // or "ar" for Arabic
        "voice_id": "optional-specific-voice-id",
        "emotion": "optional-emotion-for-voice-tuning"
    }
    """
    try:
        data = request.get_json()
        
        if not data or 'text' not in data:
            return jsonify({'error': 'Missing required text parameter'}), 400
            
        text = data.get('text')
        language = data.get('language', 'en')
        voice_id = data.get('voice_id')
        emotion = data.get('emotion')
        
        # Log the TTS request
        logger.info(f"TTS request: lang={language}, emotion={emotion}, text='{text[:50]}...' if len(text) > 50 else text")
        
        # Generate TTS file
        try:
            audio_file = tts_manager.generate_tts(text, language, voice_id, emotion)
            
            # Return the file URL for the client to play
            return jsonify({
                'status': 'success',
                'audio_url': f'/tts_cache/{audio_file}',
                'cache_hit': tts_manager.last_was_cache_hit
            })
            
        except Exception as e:
            logger.error(f"TTS generation error: {str(e)}")
            return jsonify({'error': str(e)}), 500
            
    except Exception as e:
        logger.error(f"Error in /api/speak: {str(e)}")
        traceback.print_exc()
        return jsonify({'error': str(e)}), 500

@app.route('/api/listen', methods=['POST'])
def listen():
    """Process voice input and convert to text"""
    if request.method == 'POST':
        if 'audio' not in request.files:
            return jsonify({'error': 'No audio file provided'}), 400
            
        audio_file = request.files['audio']
        language = request.form.get('language', 'en')
        
        # Save the audio file temporarily
        temp_path = os.path.join('temp', f"voice_input_{int(time.time())}.wav")
        os.makedirs('temp', exist_ok=True)
        audio_file.save(temp_path)
        
        try:
            # Process the audio with voice recognition
            if voice_recognition:
                text, confidence = voice_recognition.process_audio(temp_path, language)
                
                # Log the recognition result
                logger.info(f"Voice recognition: '{text}' (confidence: {confidence})")
                
                return jsonify({
                    'status': 'success',
                    'text': text,
                    'confidence': confidence
                })
            else:
                return jsonify({'error': 'Voice recognition not enabled'}), 501
                
        except Exception as e:
            logger.error(f"Voice recognition error: {str(e)}")
            return jsonify({'error': str(e)}), 500
        finally:
            # Clean up the temporary file
            try:
                os.remove(temp_path)
            except:
                pass

@app.route('/api/detect-face', methods=['POST'])
def detect_face():
    """Detect faces in an image and analyze emotions"""
    if request.method == 'POST':
        if 'image' not in request.files:
            return jsonify({'error': 'No image file provided'}), 400
            
        image_file = request.files['image']
        
        # Save the image temporarily
        temp_path = os.path.join('temp', f"face_input_{int(time.time())}.jpg")
        os.makedirs('temp', exist_ok=True)
        image_file.save(temp_path)
        
        try:
            # Process the image with face detection
            if face_detector:
                faces = face_detector.detect_faces(temp_path)
                
                # Log the detection result
                logger.info(f"Face detection: {len(faces)} faces detected")
                
                return jsonify({
                    'status': 'success',
                    'faces': faces
                })
            else:
                return jsonify({'error': 'Face detection not enabled'}), 501
                
        except Exception as e:
            logger.error(f"Face detection error: {str(e)}")
            return jsonify({'error': str(e)}), 500
        finally:
            # Clean up the temporary file
            try:
                os.remove(temp_path)
            except:
                pass

@app.route('/api/emotion-data', methods=['GET'])
def emotion_data():
    """Get emotion data for the current user"""
    try:
        # Get user ID from session
        user_id = request.args.get('user_id', 'anonymous')
        
        # Get emotion data from database
        emotions = db_manager.get_user_emotions(user_id)
        
        return jsonify({
            'status': 'success',
            'emotions': emotions
        })
    except Exception as e:
        logger.error(f"Error getting emotion data: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/add-face-profile', methods=['POST'])
def add_face_profile():
    """Add a new face profile for recognition"""
    if request.method == 'POST':
        if 'image' not in request.files:
            return jsonify({'error': 'No image file provided'}), 400
            
        image_file = request.files['image']
        name = request.form.get('name')
        
        if not name:
            return jsonify({'error': 'Name is required'}), 400
            
        # Save the image to the face profiles directory
        profiles_dir = os.path.join('face_profiles')
        os.makedirs(profiles_dir, exist_ok=True)
        
        # Generate a unique filename
        filename = f"{name.lower().replace(' ', '_')}_{int(time.time())}.jpg"
        file_path = os.path.join(profiles_dir, filename)
        
        image_file.save(file_path)
        
        try:
            # Add the profile to the database
            profile_id = db_manager.add_face_profile(name, filename)
            
            return jsonify({
                'status': 'success',
                'profile_id': profile_id,
                'name': name,
                'image': filename
            })
        except Exception as e:
            logger.error(f"Error adding face profile: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/delete-face-profile/<int:profile_id>', methods=['DELETE'])
def delete_face_profile(profile_id):
    """Delete a face profile"""
    try:
        # Get the profile info first to find the associated image
        profile = db_manager.get_face_profile(profile_id)
        
        if not profile:
            return jsonify({'error': 'Profile not found'}), 404
            
        # Delete the profile from the database
        db_manager.delete_face_profile(profile_id)
        
        # Also delete the image file if it exists
        if profile.get('image'):
            file_path = os.path.join('face_profiles', profile['image'])
            if os.path.exists(file_path):
                os.remove(file_path)
        
        return jsonify({
            'status': 'success',
            'message': f"Profile {profile_id} deleted"
        })
    except Exception as e:
        logger.error(f"Error deleting face profile: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/profile/<name>', methods=['GET'])
def get_profile(name):
    """Get user profile by name"""
    try:
        profile = profile_manager.get_profile_by_name(name)
        
        if not profile:
            return jsonify({'error': 'Profile not found'}), 404
            
        return jsonify({
            'status': 'success',
            'profile': profile
        })
    except Exception as e:
        logger.error(f"Error getting user profile: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/set-language', methods=['POST'])
def set_language():
    """Set the user's language preference"""
    try:
        data = request.get_json()
        language = data.get('language')
        
        if not language:
            return jsonify({'error': 'Language is required'}), 400
            
        # Set session language
        user_id = request.cookies.get('user_id', 'anonymous')
        db_manager.update_user_setting(user_id, 'language', language)
        
        return jsonify({
            'status': 'success',
            'language': language
        })
    except Exception as e:
        logger.error(f"Error setting language: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/send-sms', methods=['POST'])
def send_sms():
    """Send SMS notification"""
    if not twilio_api.is_enabled():
        return jsonify({'error': 'SMS notifications not enabled'}), 501
        
    try:
        data = request.get_json()
        phone = data.get('phone')
        message = data.get('message')
        
        if not phone or not message:
            return jsonify({'error': 'Phone number and message are required'}), 400
            
        # Send the SMS
        result = twilio_api.send_sms(phone, message)
        
        return jsonify({
            'status': 'success',
            'result': result
        })
    except Exception as e:
        logger.error(f"Error sending SMS: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/send-sms-alert', methods=['POST'])
def send_sms_alert():
    """Send a pre-formatted SMS alert notification"""
    if not twilio_api.is_enabled():
        return jsonify({'error': 'SMS notifications not enabled'}), 501
        
    try:
        data = request.get_json()
        phone = data.get('phone')
        alert_type = data.get('type', 'general')
        
        if not phone:
            return jsonify({'error': 'Phone number is required'}), 400
            
        # Generate a pre-formatted message based on the alert type
        if alert_type == 'emotion':
            emotion = data.get('emotion', 'distress')
            message = f"ALERT: Mashaaer has detected significant {emotion} emotions that may require attention."
        elif alert_type == 'appointment':
            time = data.get('time', 'upcoming')
            message = f"REMINDER: You have a {time} appointment scheduled with Mashaaer."
        else:
            message = "NOTIFICATION: A message from Mashaaer Feelings application."
            
        # Send the SMS
        result = twilio_api.send_sms(phone, message)
        
        return jsonify({
            'status': 'success',
            'result': result
        })
    except Exception as e:
        logger.error(f"Error sending SMS alert: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/sms-status', methods=['GET'])
def get_sms_status():
    """Get SMS notification status"""
    try:
        enabled = twilio_api.is_enabled()
        status = {
            'enabled': enabled,
            'provider': 'Twilio' if enabled else None
        }
        
        return jsonify({
            'status': 'success',
            'sms_status': status
        })
    except Exception as e:
        logger.error(f"Error getting SMS status: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/sms-history', methods=['GET'])
def get_sms_history():
    """Get SMS message history"""
    try:
        # Get SMS history from database
        user_id = request.cookies.get('user_id', 'anonymous')
        history = db_manager.get_sms_history(user_id)
        
        return jsonify({
            'status': 'success',
            'history': history
        })
    except Exception as e:
        logger.error(f"Error getting SMS history: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/set-consent', methods=['POST'])
def set_consent():
    """Set user consent for data storage"""
    try:
        data = request.get_json()
        consent = data.get('consent', False)
        
        # Set session consent
        user_id = request.cookies.get('user_id', 'anonymous')
        db_manager.update_user_setting(user_id, 'data_consent', consent)
        
        return jsonify({
            'status': 'success',
            'consent': consent
        })
    except Exception as e:
        logger.error(f"Error setting consent: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/update-profile', methods=['POST'])
def regular_update_profile():
    """Update user profile during standard onboarding"""
    try:
        data = request.get_json()
        name = data.get('name')
        
        if not name:
            return jsonify({'error': 'Name is required'}), 400
            
        # Set profile information
        profile_data = {
            'name': name,
            'age': data.get('age'),
            'gender': data.get('gender'),
            'language': data.get('language', 'en'),
            'timezone': data.get('timezone'),
            'notification_preferences': data.get('notification_preferences', {})
        }
        
        # Update profile in database
        profile_id = profile_manager.create_or_update_profile(profile_data)
        
        return jsonify({
            'status': 'success',
            'profile_id': profile_id
        })
    except Exception as e:
        logger.error(f"Error updating profile: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/log-recognition', methods=['POST'])
def log_recognition():
    """Log voice or face recognition attempt"""
    try:
        data = request.get_json()
        recognition_type = data.get('type')  # 'voice' or 'face'
        success = data.get('success', False)
        details = data.get('details', {})
        
        # Log to database
        db_manager.log_recognition_attempt(recognition_type, success, details)
        
        return jsonify({'status': 'success'})
    except Exception as e:
        logger.error(f"Error logging recognition: {str(e)}")
        return jsonify({'error': str(e)}), 500

# Auto-learning routes for continuous improvement
@app.route('/api/auto-learn', methods=['GET'])
def auto_learn_emotions():
    """Schedule function to run auto-learning cycles"""
    try:
        # Create auto-learning instance if not already running
        auto_learning = AutoLearning(db_manager, emotion_tracker)
        
        # Start a learning cycle
        threading.Thread(target=auto_learning.learn_cycle).start()
        
        return jsonify({'status': 'success', 'message': 'Auto-learning cycle started'})
    except Exception as e:
        logger.error(f"Error in auto-learning: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/auto-learn/status', methods=['GET'])
def get_auto_learning_status():
    """Get auto-learning status and metrics"""
    try:
        auto_learning = AutoLearning(db_manager, emotion_tracker)
        status = auto_learning.get_status()
        
        return jsonify({
            'status': 'success',
            'learning_status': status
        })
    except Exception as e:
        logger.error(f"Error getting auto-learning status: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/auto-learn/toggle', methods=['POST'])
def toggle_auto_learning():
    """Enable or disable auto-learning"""
    try:
        data = request.get_json()
        enabled = data.get('enabled', True)
        
        auto_learning = AutoLearning(db_manager, emotion_tracker)
        auto_learning.set_enabled(enabled)
        
        return jsonify({
            'status': 'success',
            'enabled': enabled
        })
    except Exception as e:
        logger.error(f"Error toggling auto-learning: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/auto-learn/trigger', methods=['POST'])
def trigger_auto_learning():
    """Manually trigger an auto-learning cycle"""
    try:
        auto_learning = AutoLearning(db_manager, emotion_tracker)
        thread = threading.Thread(target=auto_learning.learn_cycle)
        thread.start()
        
        return jsonify({
            'status': 'success',
            'message': 'Auto-learning cycle triggered'
        })
    except Exception as e:
        logger.error(f"Error triggering auto-learning: {str(e)}")
        return jsonify({'error': str(e)}), 500

# Initialize scheduler for background tasks
def init_scheduler():
    """Initialize the scheduler for periodic tasks"""
    scheduler = BackgroundScheduler()
    
    # Add auto-learning job (run every 12 hours)
    auto_learning = AutoLearning(db_manager, emotion_tracker)
    if auto_learning.is_enabled():
        scheduler.add_job(
            auto_learning.learn_cycle,
            'interval',
            hours=12,
            id='auto_learn',
            replace_existing=True
        )
    
    # Start the scheduler
    scheduler.start()
    logger.info("Scheduler started with auto-learning tasks")
    
    return scheduler

# Mobile app routes 
@app.route('/mobile/splash')
def mobile_splash():
    """Mobile app splash screen"""
    return render_template('mobile/splash.html')

@app.route('/mobile/index')
def mobile_index():
    """Mobile app main page"""
    return render_template('mobile/index.html')

@app.route('/mobile/emotions')
def mobile_emotions():
    """Mobile app emotions page"""
    return render_template('mobile/emotions.html')

@app.route('/mobile/help')
def mobile_help():
    """Mobile app help page."""
    return render_template('mobile/help.html')

@app.route('/mobile/contact')
def mobile_contact():
    """Mobile app contact page."""
    return render_template('mobile/contact.html')

@app.route('/mobile/profiles')
def mobile_profiles():
    """Mobile app profiles page"""
    return render_template('mobile/profiles.html')

@app.route('/mobile/settings')
def mobile_settings():
    """Mobile app settings page"""
    return render_template('mobile/settings.html')

# User settings routes
@app.route('/api/user-settings', methods=['GET', 'POST'])
def user_settings():
    """Get or update user settings"""
    user_id = request.cookies.get('user_id', 'anonymous')
    
    if request.method == 'GET':
        try:
            settings = db_manager.get_user_settings(user_id)
            return jsonify({'status': 'success', 'settings': settings})
        except Exception as e:
            logger.error(f"Error getting user settings: {str(e)}")
            return jsonify({'error': str(e)}), 500
    else:  # POST
        try:
            data = request.get_json()
            
            # Update settings in database
            for key, value in data.items():
                db_manager.update_user_setting(user_id, key, value)
            
            # Get updated settings
            settings = db_manager.get_user_settings(user_id)
            
            return jsonify({'status': 'success', 'settings': settings})
        except Exception as e:
            logger.error(f"Error updating user settings: {str(e)}")
            return jsonify({'error': str(e)}), 500

@app.route('/api/reset-settings', methods=['POST'])
def reset_user_settings():
    """Reset user settings to default"""
    try:
        user_id = request.cookies.get('user_id', 'anonymous')
        db_manager.reset_user_settings(user_id)
        
        # Get default settings
        settings = db_manager.get_user_settings(user_id)
        
        return jsonify({'status': 'success', 'settings': settings})
    except Exception as e:
        logger.error(f"Error resetting user settings: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/logout', methods=['POST'])
def user_logout():
    """Log out the current user"""
    response = jsonify({'status': 'success', 'message': 'Logged out successfully'})
    
    # Clear user cookie
    response.set_cookie('user_id', '', expires=0)
    
    return response

@app.route('/api/set-theme', methods=['POST'])
def set_theme():
    """Set the user's theme preference"""
    try:
        data = request.get_json()
        theme = data.get('theme')
        
        if not theme:
            return jsonify({'error': 'Theme is required'}), 400
            
        # Set session theme
        user_id = request.cookies.get('user_id', 'anonymous')
        db_manager.update_user_setting(user_id, 'theme', theme)
        
        return jsonify({
            'status': 'success',
            'theme': theme
        })
    except Exception as e:
        logger.error(f"Error setting theme: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/static/markdown/<path:filename>')
def serve_markdown(filename):
    """Serve markdown files from the static/markdown directory with proper headers"""
    # Security check to prevent directory traversal
    if '..' in filename:
        return "Invalid filename", 400
        
    # Set the appropriate MIME type
    response = send_from_directory('static/markdown', filename)
    response.headers['Content-Type'] = 'text/markdown'
    
    return response

if __name__ == '__main__':
    # Initialize scheduler for background tasks
    scheduler = init_scheduler()
    
    try:
        # Start the Flask application
        app.run(host='0.0.0.0', port=5000, debug=True, threaded=True)
    except (KeyboardInterrupt, SystemExit):
        # Ensure scheduler shuts down properly
        if scheduler:
            scheduler.shutdown()
        logger.info("Application shutting down")