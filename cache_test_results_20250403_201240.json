{
  "timestamp": "2025-04-03T20:12:40.822400",
  "execution_time_seconds": 3.843430995941162,
  "exit_code": 1,
  "passed": false,
  "raw_output": "============================= test session starts ==============================\nplatform linux -- Python 3.11.10, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/workspace\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, mock-3.14.0, flask-1.3.0\ncollecting ... collected 9 items\n\ntests/test_api_caching.py::test_analyze_emotion_cache_hit \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: c3a4c6b1-47b5-4580-9f46-82b10501bc9f (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'I am feeling happy t...' in en\nPASSED                                                                   [ 11%]\ntests/test_api_caching.py::test_analyze_emotion_bypass_cache \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 1a689306-c019-4f10-abac-a5f532fc8fc1 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'Testing bypass cache' in en\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'Testing bypass cache' in en\nPASSED                                                                   [ 22%]\ntests/test_api_caching.py::test_analyze_emotion_cache_expiration \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 312e0556-f4b1-4905-b15d-7b2dc76bbdec (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'This text is for tes...' in en\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'This text is for tes...' in en\nPASSED                                                                   [ 33%]\ntests/test_api_caching.py::test_speak_cache_hit \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:581 Mobile API: TTS Request: text='Test TTS caching text 9b1a1993...', voice=default, language=en-US\nINFO     mobile_api_routes:mobile_api_routes.py:606 Mobile API: TTS successful: tts_cache/test_speech_9b1a1993.mp3 (19 bytes)\nINFO     mobile_api_routes:mobile_api_routes.py:514 Mobile API: Using cached TTS audio: tts_cache/test_speech_9b1a1993.mp3\nPASSED                                                                   [ 44%]\ntests/test_api_caching.py::test_speak_different_voice_parameters \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:581 Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=en-US\nINFO     mobile_api_routes:mobile_api_routes.py:606 Mobile API: TTS successful: tts_cache/default_en-US_d5da9974.mp3 (19 bytes)\nINFO     mobile_api_routes:mobile_api_routes.py:581 Mobile API: TTS Request: text='Test voice parameter variation...', voice=voice_2, language=en-US\nINFO     mobile_api_routes:mobile_api_routes.py:606 Mobile API: TTS successful: tts_cache/voice_2_en-US_d5da9974.mp3 (19 bytes)\nINFO     mobile_api_routes:mobile_api_routes.py:581 Mobile API: TTS Request: text='Test voice parameter variation...', voice=default, language=ar\nINFO     mobile_api_routes:mobile_api_routes.py:606 Mobile API: TTS successful: tts_cache/default_ar_d5da9974.mp3 (19 bytes)\nPASSED                                                                   [ 55%]\ntests/test_api_caching.py::test_cache_error_handling \n-------------------------------- live log call ---------------------------------\nWARNING  mobile_api_routes:mobile_api_routes.py:273 Failed to process cached result: Simulated database error\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 9512d766-a8f4-4926-9580-474dc3376f1e (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'Testing error handli...' in en\nFAILED                                                                   [ 66%]\ntests/test_api_caching.py::test_cache_invalidation FAILED                [ 77%]\ntests/test_api_caching.py::test_performance_metrics FAILED               [ 88%]\ntests/test_api_caching.py::test_cache_hit_count_tracking \n-------------------------------- live log call ---------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 4ee44f61-ac07-418c-b33e-8ecfb215d0e3 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'Testing cache hit co...' in en\nFAILED                                                                   [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_cache_error_handling ___________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f2f9af67c90>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f2f9af1e020>\napp = <Flask 'main'>\n\n    def test_cache_error_handling(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests error handling in the caching mechanism.\"\"\"\n        clear_cache()\n    \n        # Mock db_manager's get_cached_response to raise an exception\n        with patch('database.db_manager.DatabaseManager.get_cached_response') as mock_get_cache:\n            mock_get_cache.side_effect = Exception(\"Simulated database error\")\n    \n            # Setup mock for emotion analysis to proceed despite cache error\n            with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n                mock_analyze.return_value = create_mock_emotion_result()\n    \n                # Request should proceed despite cache error\n                response = client.post(\n                    \"/mobile-api/analyze-emotion\",\n                    json={\"text\": \"Testing error handling\", \"language\": \"en\"}\n                )\n    \n                # Verify response\n                assert response.status_code == 200\n                result = json.loads(response.data)\n                assert result.get(\"success\") is True\n    \n                # Cache status should indicate an issue\n>               assert result.get(\"cache_status\") == \"error\"\nE               AssertionError: assert 'miss' == 'error'\nE                 \nE                 - error\nE                 + miss\n\ntests/test_api_caching.py:570: AssertionError\n----------------------------- Captured stdout call -----------------------------\nCache table cleared - all entries deleted and committed\nCache entries after clearing: 0\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n\n===== ANALYZE EMOTION API CALLED =====\nRequest method: POST\nDEBUG: Normalized text: 'testing error handling'\nDEBUG: Generated cache key: 'emotion_5210e99a54904b7104f6d6aae31354ab_en'\nDEBUG: Bypass cache: False\nDEBUG: Storing in cache, bypass_cache=False, db_manager exists=True\nDEBUG: cache_data prepared: {\"primary_emotion\": \"happy\", \"confidence\": 0.8, \"emotions\": {\"happy\": 0.8, \"neutral\": 0.2}, \"language\": \"en\", \"timestamp\": \"2025-04-03T20:12:40Z\"}\nDEBUG: cache_key for storage: emotion_5210e99a54904b7104f6d6aae31354ab_en\nDEBUG: Cache storage result: True\nDEBUG: Cache entry after storage: True\nDEBUG: Cache key: emotion_5210e99a54904b7104f6d6aae31354ab_en, Created: 2025-04-03 20:12:40.347255, Hit count: 0\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 20:12:40,345 - mobile_api_routes - WARNING - Failed to process cached result: Simulated database error\n2025-04-03 20:12:40,346 - mobile_api_routes - INFO - Created new mobile session: 9512d766-a8f4-4926-9580-474dc3376f1e (mobile app: False)\n2025-04-03 20:12:40,346 - mobile_api_routes - INFO - Mobile API: Emotion analysis request: 'Testing error handli...' in en\n------------------------------ Captured log call -------------------------------\nWARNING  mobile_api_routes:mobile_api_routes.py:273 Failed to process cached result: Simulated database error\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 9512d766-a8f4-4926-9580-474dc3376f1e (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'Testing error handli...' in en\n___________________________ test_cache_invalidation ____________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f2f9af53190>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f2f9c3af380>\napp = <Flask 'main'>\nadd_test_cache_entry = <function add_test_cache_entry.<locals>._add_entry at 0x7f2f9af1e3e0>\n\n    def test_cache_invalidation(client: FlaskClient, db_session: Session, clear_cache, app: Flask, add_test_cache_entry):\n        \"\"\"Tests that cache entries can be invalidated programmatically.\"\"\"\n        clear_cache()\n    \n        # Create some test cache entries\n        add_test_cache_entry(\"test_cache_key_1\", json.dumps({\"data\": \"value1\"}))\n        add_test_cache_entry(\"test_cache_key_2\", json.dumps({\"data\": \"value2\"}))\n        add_test_cache_entry(\"different_prefix_1\", json.dumps({\"data\": \"other\"}))\n    \n        # Verify entries exist\n        assert get_cache_entry(db_session, \"test_cache_key_1\") is not None\n        assert get_cache_entry(db_session, \"test_cache_key_2\") is not None\n        assert get_cache_entry(db_session, \"different_prefix_1\") is not None\n    \n        # Use db_manager to invalidate specific entry\n        with app.app_context():\n>           from database.db_manager import db_manager  # Import within context\nE           ImportError: cannot import name 'db_manager' from 'database.db_manager' (/home/runner/workspace/database/db_manager.py)\n\ntests/test_api_caching.py:612: ImportError\n----------------------------- Captured stdout call -----------------------------\nCache table cleared - all entries deleted and committed\nCache entries after clearing: 0\n___________________________ test_performance_metrics ___________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f2f9af0c2d0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f2f9c3cf2e0>\napp = <Flask 'main'>\n\n    def test_performance_metrics(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that caching improves performance.\"\"\"\n        clear_cache()\n    \n        test_text = \"Performance testing with a longer text to analyze the sentiment and emotion of this passage.\"\n    \n        # Setup a slow emotion analysis mock to simulate computational cost\n        with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze:\n            def slow_analyze(*args, **kwargs):\n                time.sleep(0.5)  # Simulate processing delay\n                return create_mock_emotion_result()\n    \n            mock_analyze.side_effect = slow_analyze\n    \n            # First request - should be slow due to analysis\n            start_time = time.time()\n            response1 = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n            first_request_time = time.time() - start_time\n    \n            # Second request - should be fast due to cache\n            start_time = time.time()\n            response2 = client.post(\n                \"/mobile-api/analyze-emotion\",\n                json={\"text\": test_text, \"language\": \"en\"}\n            )\n            second_request_time = time.time() - start_time\n    \n            # Verify timing improved significantly\n>           assert second_request_time < first_request_time\nE           assert 0.021735429763793945 < 0.01943826675415039\n\ntests/test_api_caching.py:660: AssertionError\n----------------------------- Captured stdout call -----------------------------\nCache table cleared - all entries deleted and committed\nCache entries after clearing: 0\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n\n===== ANALYZE EMOTION API CALLED =====\nRequest method: POST\nDEBUG: Normalized text: 'performance testing with a longer text to analyze the sentiment and emotion of this passage.'\nDEBUG: Generated cache key: 'emotion_395f9c6d39952752385ed3c8d924f0d3_en'\nDEBUG: Bypass cache: False\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n\n===== ANALYZE EMOTION API CALLED =====\nRequest method: POST\nDEBUG: Normalized text: 'performance testing with a longer text to analyze the sentiment and emotion of this passage.'\nDEBUG: Generated cache key: 'emotion_395f9c6d39952752385ed3c8d924f0d3_en'\nDEBUG: Bypass cache: False\n________________________ test_cache_hit_count_tracking _________________________\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f2f9af33d50>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f2f9af2c900>\napp = <Flask 'main'>\n\n    def test_cache_hit_count_tracking(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that cache hit counts are properly tracked when retrieving cached emotion analysis results.\"\"\"\n        print(\"\\n===== Starting test_cache_hit_count_tracking =====\")\n    \n        with app.app_context():\n            try:\n                # Step 1: Setup - ensure we have a clean database state\n                clear_cache()\n                db_session.commit()\n    \n                cache_count = db_session.query(Cache).count()\n                assert cache_count == 0, f\"Expected empty cache at start of test, but found {cache_count} entries\"\n                print(f\"Verified cache is empty: {cache_count} entries\")\n    \n                # Create unique test text to avoid collisions with other tests\n                import uuid\n                unique_id = uuid.uuid4().hex[:8]\n                test_text = f\"Testing cache hit counts {unique_id}\"\n                print(f\"Using unique test text: '{test_text}'\")\n    \n                # Generate the cache key using the same algorithm as in the application\n                import hashlib\n                normalized_text = test_text.strip().lower()\n                cache_key = f\"emotion_{hashlib.md5(normalized_text.encode()).hexdigest()}_en\"\n                print(f\"Cache key: {cache_key}\")\n    \n                # Step 2: Set up mocks to control the emotion analysis behavior\n                with patch('emotion_tracker.EmotionTracker.analyze_text') as mock_analyze, \\\n                     patch('emotion_tracker.EmotionTracker.analyze_text_advanced') as mock_analyze_advanced:\n    \n                    # Configure mocks with consistent return values\n                    mock_emotion_result = {\n                        \"primary_emotion\": \"happy\",\n                        \"confidence\": 0.9,\n                        \"emotions\": {\n                            \"happy\": 0.9,\n                            \"neutral\": 0.05,\n                            \"sad\": 0.02,\n                            \"angry\": 0.01,\n                            \"fear\": 0.01,\n                            \"surprise\": 0.01\n                        }\n                    }\n                    mock_analyze.return_value = mock_emotion_result\n                    mock_analyze_advanced.return_value = mock_emotion_result\n    \n                    # Step 3: First request to create the cache entry\n                    print(\"\\n----- Making initial request to create cache entry -----\")\n                    response1 = client.post(\n                        \"/mobile-api/analyze-emotion\",\n                        json={\"text\": test_text, \"language\": \"en\", \"include_details\": \"true\"}\n                    )\n    \n                    # Verify the response indicates a cache miss\n                    result1 = json.loads(response1.data)\n                    print(f\"Response status code: {response1.status_code}\")\n                    print(f\"Cache status: {result1.get('cache_status')}\")\n                    assert response1.status_code == 200\n                    assert result1.get(\"success\") is True\n                    assert result1.get(\"cache_status\") == \"miss\"\n    \n                    # Ensure the cache entry was created\n                    db_session.commit()  # Commit to ensure any pending changes are visible\n    \n                    cache_entry = db_session.query(Cache).filter(Cache.key == cache_key).first()\n>                   assert cache_entry is not None, \"Cache entry was not created after first request\"\nE                   AssertionError: Cache entry was not created after first request\nE                   assert None is not None\n\ntests/test_api_caching.py:733: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\n===== Starting test_cache_hit_count_tracking =====\nCache table cleared - all entries deleted and committed\nCache entries after clearing: 0\nVerified cache is empty: 0 entries\nUsing unique test text: 'Testing cache hit counts 0fb6a003'\nCache key: emotion_f5b9d9ffea9672237c47dc182cbeda07_en\n\n----- Making initial request to create cache entry -----\n\ud83d\udd0d Request to: /mobile-api/analyze-emotion\n\n===== ANALYZE EMOTION API CALLED =====\nRequest method: POST\nDEBUG: Normalized text: 'testing cache hit counts 0fb6a003'\nDEBUG: Generated cache key: 'emotion_f5b9d9ffea9672237c47dc182cbeda07_en'\nDEBUG: Bypass cache: False\nDEBUG: Storing in cache, bypass_cache=False, db_manager exists=True\nDEBUG: cache_data prepared: {\"primary_emotion\": \"happy\", \"confidence\": 0.9, \"emotions\": {\"happy\": 0.9, \"neutral\": 0.05, \"sad\": 0.02, \"angry\": 0.01, \"fear\": 0.01, \"surprise\": 0.01}, \"language\": \"en\", \"timestamp\": \"2025-04-03T20:12:40Z\"}\nDEBUG: cache_key for storage: emotion_f5b9d9ffea9672237c47dc182cbeda07_en\nDEBUG: Cache storage result: True\nDEBUG: Cache entry after storage: True\nDEBUG: Cache key: emotion_f5b9d9ffea9672237c47dc182cbeda07_en, Created: 2025-04-03 20:12:40, Hit count: 0\nResponse status code: 200\nCache status: miss\n----------------------------- Captured stderr call -----------------------------\n2025-04-03 20:12:40,564 - mobile_api_routes - INFO - Created new mobile session: 4ee44f61-ac07-418c-b33e-8ecfb215d0e3 (mobile app: False)\n2025-04-03 20:12:40,564 - mobile_api_routes - INFO - Mobile API: Emotion analysis request: 'Testing cache hit co...' in en\n------------------------------ Captured log call -------------------------------\nINFO     mobile_api_routes:mobile_api_routes.py:75 Created new mobile session: 4ee44f61-ac07-418c-b33e-8ecfb215d0e3 (mobile app: False)\nINFO     mobile_api_routes:mobile_api_routes.py:291 Mobile API: Emotion analysis request: 'Testing cache hit co...' in en\n=============================== warnings summary ===============================\ndatabase/models.py:7\n  /home/runner/workspace/database/models.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_api_caching.py::test_cache_error_handling - AssertionError:...\nFAILED tests/test_api_caching.py::test_cache_invalidation - ImportError: cann...\nFAILED tests/test_api_caching.py::test_performance_metrics - assert 0.0217354...\nFAILED tests/test_api_caching.py::test_cache_hit_count_tracking - AssertionEr...\n==================== 4 failed, 5 passed, 1 warning in 1.01s ====================\n"
}