/**
 * Mashaaer Micro-Interactions
 * Provides delightful visual and audio feedback for user interactions.
 * 
 * This module enhances the user experience by adding:
 * - Sound effects for UI interactions
 * - Visual feedback animations
 * - Particle effects
 * - Notifications with sound
 * - Emotion-based visual cues
 */

(function() {
  // Configuration
  const config = {
    soundEnabled: true,
    particlesEnabled: true,
    notificationsEnabled: true,
    soundPath: '/static/sounds/',
    emotionColors: {
      'happy': {
        primary: '#FFD700',    // Gold
        secondary: '#FFA500'   // Orange
      },
      'sad': {
        primary: '#4169E1',    // Royal Blue
        secondary: '#1E90FF'   // Dodger Blue
      },
      'angry': {
        primary: '#FF4500',    // Orange Red
        secondary: '#FF6347'   // Tomato
      },
      'surprised': {
        primary: '#8A2BE2',    // Blue Violet
        secondary: '#9370DB'   // Medium Purple
      },
      'fearful': {
        primary: '#800080',    // Purple
        secondary: '#483D8B'   // Dark Slate Blue
      },
      'disgusted': {
        primary: '#006400',    // Dark Green
        secondary: '#228B22'   // Forest Green
      },
      'neutral': {
        primary: '#9370DB',    // Medium Purple (default cosmic color)
        secondary: '#7B68EE'   // Medium Slate Blue
      },
      'mixed': {
        primary: '#DA70D6',    // Orchid
        secondary: '#BA55D3'   // Medium Orchid
      }
    },
    sounds: {
      'hover': 'hover.mp3',
      'click': 'click.mp3',
      'success': 'success.mp3',
      'error': 'error.mp3',
      'notification': 'notification.mp3',
      'welcome': 'welcome.mp3',
      'cosmic': 'cosmic.mp3',
      'listen_start': 'listen_start.mp3',
      'transition': 'transition.mp3', // Custom sound for emotion transitions
      'listen_stop': 'listen_stop.mp3'
    },
    // Store last sound played times to prevent sound flooding
    lastSoundTimes: {},
    // Debounce time in milliseconds for sounds
    soundDebounceTime: 300
  };

  // Current emotional state
  let currentEmotion = 'neutral';
  
  // Initialization
  function init() {
    // Set CSS variables for current emotion
    setEmotion(currentEmotion);
    
    // Pre-load sounds
    if (config.soundEnabled) {
      preloadSounds();
    }
    
    console.log('Mashaaer Micro-Interactions initialized');
  }
  
  /**
   * Preload sound files to prevent delay on first play
   */
  function preloadSounds() {
    Object.values(config.sounds).forEach(soundFile => {
      const audio = new Audio(`${config.soundPath}${soundFile}`);
      audio.preload = 'auto';
      // Just load, don't play
      audio.load();
    });
  }
  
  /**
   * Play a sound effect if sound is enabled
   * 
   * @param {string} soundType - Type of sound to play (hover, click, etc.)
   * @returns {Promise} - Promise that resolves when sound plays or fails
   */
  function playSound(soundType) {
    if (!config.soundEnabled) return Promise.resolve();
    
    // Debounce sounds to prevent flooding
    const now = Date.now();
    if (config.lastSoundTimes[soundType] && 
        now - config.lastSoundTimes[soundType] < config.soundDebounceTime) {
      return Promise.resolve();
    }
    
    config.lastSoundTimes[soundType] = now;
    
    const soundFile = config.sounds[soundType];
    if (!soundFile) {
      console.warn(`Sound type "${soundType}" not found`);
      return Promise.resolve();
    }
    
    const audio = new Audio(`${config.soundPath}${soundFile}`);
    return audio.play().catch(err => {
      console.warn(`Sound playback error for ${soundType}: ${err.message}`);
    });
  }
  
  /**
   * Apply micro-interactions to a DOM element
   * 
   * @param {string|Element} selector - CSS selector or DOM element
   * @param {Object} options - Configuration options
   * @returns {Element|null} - The element or null if not found
   */
  function applyTo(selector, options = {}) {
    const element = typeof selector === 'string' 
      ? document.querySelector(selector) 
      : selector;
      
    if (!element) {
      console.warn(`Element not found: ${selector}`);
      return null;
    }
    
    // Default options
    const settings = Object.assign({
      ripple: false,
      hoverSound: null,
      clickSound: 'click',
      hoverClass: null,
      activeClass: null,
      particleEffect: false
    }, options);
    
    // Add marker class
    element.classList.add('has-interactions');
    
    // Apply ripple effect
    if (settings.ripple) {
      applyRippleEffect(element);
    }
    
    // Mouse enter event
    element.addEventListener('mouseenter', function() {
      // Play hover sound if specified
      if (settings.hoverSound) {
        playSound(settings.hoverSound);
      }
      
      // Add hover class if specified
      if (settings.hoverClass) {
        element.classList.add(settings.hoverClass);
      }
    });
    
    // Mouse leave event
    element.addEventListener('mouseleave', function() {
      // Remove hover class if specified
      if (settings.hoverClass) {
        element.classList.remove(settings.hoverClass);
      }
    });
    
    // Click event
    element.addEventListener('click', function(e) {
      // Play click sound
      if (settings.clickSound) {
        playSound(settings.clickSound);
      }
      
      // Add temporary active class
      if (settings.activeClass) {
        element.classList.add(settings.activeClass);
        setTimeout(() => {
          element.classList.remove(settings.activeClass);
        }, 300);
      }
      
      // Create particle effect if enabled
      if (settings.particleEffect) {
        createParticleBurst(element);
      }
    });
    
    return element;
  }
  
  /**
   * Apply ripple effect to an element
   * 
   * @param {Element} element - DOM element to enhance
   */
  function applyRippleEffect(element) {
    // Make element relative position if it's not already set
    if (getComputedStyle(element).position === 'static') {
      element.style.position = 'relative';
    }
    
    // Add overflow hidden if needed
    if (getComputedStyle(element).overflow !== 'hidden') {
      element.style.overflow = 'hidden';
    }
    
    // Add click listener for ripple effect
    element.addEventListener('click', function(e) {
      // Create ripple element
      const ripple = document.createElement('span');
      ripple.className = 'interaction-ripple';
      
      // Position ripple
      const rect = element.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      
      // Set ripple style
      ripple.style.width = ripple.style.height = `${size}px`;
      ripple.style.left = `${e.clientX - rect.left - size / 2}px`;
      ripple.style.top = `${e.clientY - rect.top - size / 2}px`;
      ripple.style.position = 'absolute';
      ripple.style.borderRadius = '50%';
      ripple.style.backgroundColor = 'rgba(255, 255, 255, 0.3)';
      ripple.style.transform = 'scale(0)';
      ripple.style.animation = 'ripple-effect 0.6s linear';
      
      // Add ripple to element
      element.appendChild(ripple);
      
      // Remove ripple after animation
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
    
    // Add ripple animation if needed
    if (!document.querySelector('#ripple-effect-style')) {
      const style = document.createElement('style');
      style.id = 'ripple-effect-style';
      style.textContent = `
        @keyframes ripple-effect {
          to {
            transform: scale(4);
            opacity: 0;
          }
        }
      `;
      document.head.appendChild(style);
    }
  }
  
  /**
   * Create a particle burst effect
   * 
   * @param {Element} element - Source element for the burst
   * @param {Object} options - Configuration options
   */
  function createParticleBurst(element, options = {}) {
    if (!config.particlesEnabled) return;
    
    // Default options
    const settings = Object.assign({
      particleCount: 12,
      emotion: currentEmotion,
      duration: 1000
    }, options);
    
    const rect = element.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    
    // Get emotion colors
    const colors = config.emotionColors[settings.emotion] || config.emotionColors.neutral;
    
    // Create temporary container for particles
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '0';
    container.style.left = '0';
    container.style.width = '100%';
    container.style.height = '100%';
    container.style.pointerEvents = 'none';
    container.style.zIndex = '99999';
    document.body.appendChild(container);
    
    // Create particles
    for (let i = 0; i < settings.particleCount; i++) {
      // Create particle
      const particle = document.createElement('div');
      
      // Calculate angle and distance
      const angle = (i / settings.particleCount) * 360;
      const distance = 30 + Math.random() * 40;
      
      // Calculate end position
      const endX = centerX + distance * Math.cos(angle * Math.PI / 180);
      const endY = centerY + distance * Math.sin(angle * Math.PI / 180);
      
      // Set particle style
      particle.style.position = 'absolute';
      particle.style.width = '8px';
      particle.style.height = '8px';
      particle.style.borderRadius = '50%';
      particle.style.backgroundColor = i % 2 === 0 ? colors.primary : colors.secondary;
      particle.style.boxShadow = `0 0 6px ${i % 2 === 0 ? colors.primary : colors.secondary}`;
      
      // Set initial position
      particle.style.top = `${centerY}px`;
      particle.style.left = `${centerX}px`;
      
      // Add particle to container
      container.appendChild(particle);
      
      // Animate particle
      setTimeout(() => {
        // Set transition for animation
        particle.style.transition = `all ${settings.duration}ms cubic-bezier(0.165, 0.84, 0.44, 1)`;
        
        // Move particle
        particle.style.top = `${endY}px`;
        particle.style.left = `${endX}px`;
        
        // Fade out particle
        particle.style.opacity = '0';
        
        // Reduce size
        particle.style.width = '2px';
        particle.style.height = '2px';
      }, 10);
    }
    
    // Remove container after animation
    setTimeout(() => {
      document.body.removeChild(container);
    }, settings.duration + 100);
  }
  
  /**
   * Set the current emotion, updating CSS variables
   * 
   * @param {string} emotion - The emotional state
   * @param {Element} [sourceElement] - Optional element to originate the transition effect from
   */
  function setEmotion(emotion, sourceElement) {
    // Skip if same emotion
    if (emotion === currentEmotion) return;
    
    // Store previous emotion for transition
    const previousEmotion = currentEmotion;
    
    // Update current emotion
    currentEmotion = emotion;
    
    // Get emotion colors
    const colors = config.emotionColors[emotion] || config.emotionColors.neutral;
    
    // Update document-level CSS variables for theming
    document.documentElement.style.setProperty('--emotion-primary', colors.primary);
    document.documentElement.style.setProperty('--emotion-secondary', colors.secondary);
    
    // Update theme class on root element
    const htmlRoot = document.getElementById('html-root') || document.documentElement;
    
    // Remove previous emotion class
    htmlRoot.classList.forEach(className => {
      if (className.startsWith('emotion-')) {
        htmlRoot.classList.remove(className);
      }
    });
    
    // Add new emotion class
    htmlRoot.classList.add(`emotion-${emotion}`);
    
    // Update data-mood attribute
    htmlRoot.setAttribute('data-mood', emotion);
    
    // Create transition effect
    createEmotionTransitionEffect(previousEmotion, emotion, sourceElement);
    
    // Play transition sound
    playSound('transition');
    
    // Dispatch emotion change event
    const event = new CustomEvent('emotionChanged', {
      detail: {
        from: previousEmotion,
        to: emotion
      },
      bubbles: true
    });
    document.dispatchEvent(event);
    
    // Log emotion change
    console.log(`Emotion changed: ${previousEmotion} → ${emotion}`);
  }
  
  /**
   * Create a sparkle effect for emotion transitions
   * Enhanced for more dynamic visual effects
   * 
   * @param {string} fromEmotion - The previous emotion
   * @param {string} toEmotion - The new emotion
   * @param {Element} [sourceElement] - Optional element to originate the effect from
   */
  function createEmotionTransitionEffect(fromEmotion, toEmotion, sourceElement) {
    if (!config.particlesEnabled) return;
    
    // Create container for sparkles
    const container = document.createElement('div');
    container.className = 'emotion-transition-container';
    container.style.position = 'fixed';
    container.style.top = '0';
    container.style.left = '0';
    container.style.width = '100%';
    container.style.height = '100%';
    container.style.pointerEvents = 'none';
    container.style.zIndex = '99999';
    document.body.appendChild(container);
    
    // Determine origin point for effect
    let originX, originY;
    
    if (sourceElement) {
      // Use source element as origin
      const rect = sourceElement.getBoundingClientRect();
      originX = rect.left + rect.width / 2;
      originY = rect.top + rect.height / 2;
    } else {
      // Default to center of viewport
      originX = window.innerWidth / 2;
      originY = window.innerHeight / 2;
    }
    
    // Get emotion colors
    const colors = config.emotionColors[toEmotion] || config.emotionColors.neutral;
    
    // Create trail sparkles (moving outward from origin)
    const trailCount = 30 + Math.floor(Math.random() * 20);
    
    for (let i = 0; i < trailCount; i++) {
      const sparkle = document.createElement('div');
      sparkle.className = `emotion-sparkle emotion-${toEmotion} sparkle-particle`;
      
      // Varied sizes for more natural effect
      const size = 3 + Math.random() * 4;
      sparkle.style.width = `${size}px`;
      sparkle.style.height = `${size}px`;
      
      // Position at origin
      sparkle.style.left = `${originX}px`;
      sparkle.style.top = `${originY}px`;
      
      // Set random travel distance and direction
      sparkle.style.setProperty('--sparkle-x', `${(Math.random() * 100) - 50}px`);
      sparkle.style.setProperty('--sparkle-y', `${(Math.random() * 100) - 50}px`);
      
      // Staggered animation start
      sparkle.style.animationDelay = `${Math.random() * 0.6}s`;
      
      // Add to container
      container.appendChild(sparkle);
    }
    
    // Create star burst effect (special particles)
    const burstCount = 10 + Math.floor(Math.random() * 5);
    
    for (let i = 0; i < burstCount; i++) {
      const burstSparkle = document.createElement('div');
      burstSparkle.className = `emotion-sparkle emotion-${toEmotion} star-shape with-trail`;
      
      // Larger special particles
      const size = 10 + Math.random() * 4;
      burstSparkle.style.width = `${size}px`;
      burstSparkle.style.height = `${size}px`;
      
      // Position at origin
      burstSparkle.style.left = `${originX}px`;
      burstSparkle.style.top = `${originY}px`;
      
      // Set longer travel distance for burst particles
      burstSparkle.style.setProperty('--sparkle-x', `${(Math.random() * 160) - 80}px`);
      burstSparkle.style.setProperty('--sparkle-y', `${(Math.random() * 160) - 80}px`);
      
      // Slightly delayed start for burst effect
      burstSparkle.style.animationDelay = `${0.1 + Math.random() * 0.2}s`;
      
      // Add to container
      container.appendChild(burstSparkle);
    }
    
    // Remove container after all animations complete
    setTimeout(() => {
      if (document.body.contains(container)) {
        document.body.removeChild(container);
      }
    }, 2500); // Slightly longer duration to accommodate the new animations
  }
  
  /**
   * Create a notification element
   * 
   * @param {string} message - Notification message
   * @param {string} type - Notification type: 'info', 'success', 'warning', 'error'
   * @param {Object} options - Additional options
   * @returns {Element} - The created notification element
   */
  function createNotification(message, type = 'info', options = {}) {
    if (!config.notificationsEnabled) return null;
    
    // Default options
    const settings = Object.assign({
      duration: 4000,
      sound: true,
      icon: true,
      emotion: null,
      position: 'top-right' // 'top-right', 'top-left', 'bottom-right', 'bottom-left'
    }, options);
    
    // Map type to emotion if not specified
    if (!settings.emotion) {
      switch (type) {
        case 'success': settings.emotion = 'happy'; break;
        case 'error': settings.emotion = 'angry'; break;
        case 'warning': settings.emotion = 'fearful'; break;
        default: settings.emotion = 'neutral';
      }
    }
    
    // Get colors for styling
    const colors = config.emotionColors[settings.emotion];
    
    // Create notification container if it doesn't exist
    let container = document.querySelector('.mashaaer-notification-container');
    if (!container) {
      container = document.createElement('div');
      container.className = 'mashaaer-notification-container';
      
      // Set container style
      container.style.position = 'fixed';
      container.style.zIndex = '10000';
      
      // Position container based on settings
      switch (settings.position) {
        case 'top-left':
          container.style.top = '20px';
          container.style.left = '20px';
          break;
        case 'bottom-right':
          container.style.bottom = '20px';
          container.style.right = '20px';
          break;
        case 'bottom-left':
          container.style.bottom = '20px';
          container.style.left = '20px';
          break;
        case 'top-right':
        default:
          container.style.top = '20px';
          container.style.right = '20px';
      }
      
      document.body.appendChild(container);
    }
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = 'mashaaer-notification';
    notification.style.opacity = '0';
    notification.style.transform = 'translateY(-20px)';
    notification.style.transition = 'all 0.3s ease-out';
    
    // Add icon if enabled
    if (settings.icon) {
      const iconSpan = document.createElement('span');
      iconSpan.className = 'notification-icon';
      
      // Set icon based on type
      switch (type) {
        case 'success': iconSpan.textContent = '✓'; break;
        case 'error': iconSpan.textContent = '✗'; break;
        case 'warning': iconSpan.textContent = '⚠'; break;
        default: iconSpan.textContent = 'ℹ';
      }
      
      notification.appendChild(iconSpan);
    }
    
    // Add message
    const messageSpan = document.createElement('span');
    messageSpan.textContent = message;
    notification.appendChild(messageSpan);
    
    // Add close button
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '×';
    closeBtn.style.background = 'none';
    closeBtn.style.border = 'none';
    closeBtn.style.color = 'white';
    closeBtn.style.fontSize = '20px';
    closeBtn.style.cursor = 'pointer';
    closeBtn.style.marginLeft = 'auto';
    closeBtn.style.padding = '0 0 0 10px';
    
    // Style notification element
    notification.style.display = 'flex';
    notification.style.alignItems = 'center';
    notification.style.padding = '12px 15px';
    notification.style.marginBottom = '10px';
    notification.style.background = `linear-gradient(135deg, ${colors.primary} 0%, ${colors.secondary} 100%)`;
    notification.style.borderRadius = '8px';
    notification.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
    notification.style.color = 'white';
    
    notification.appendChild(closeBtn);
    
    // Add to container
    container.appendChild(notification);
    
    // Play sound if enabled
    if (settings.sound) {
      playSound('notification');
    }
    
    // Animate in
    setTimeout(() => {
      notification.style.opacity = '1';
      notification.style.transform = 'translateY(0)';
    }, 10);
    
    // Set up close handler
    const closeNotification = () => {
      notification.style.opacity = '0';
      notification.style.transform = 'translateY(-20px)';
      
      setTimeout(() => {
        if (container.contains(notification)) {
          container.removeChild(notification);
        }
        
        // Remove container if empty
        if (container.children.length === 0) {
          document.body.removeChild(container);
        }
      }, 300);
    };
    
    // Close on button click
    closeBtn.addEventListener('click', closeNotification);
    
    // Auto close after duration
    if (settings.duration > 0) {
      setTimeout(closeNotification, settings.duration);
    }
    
    return notification;
  }
  
  /**
   * Show success notification
   * 
   * @param {string} message - Success message
   * @param {Object} options - Notification options
   * @returns {Element} - The notification element
   */
  function showSuccess(message, options = {}) {
    return createNotification(message, 'success', options);
  }
  
  /**
   * Show error notification
   * 
   * @param {string} message - Error message
   * @param {Object} options - Notification options
   * @returns {Element} - The notification element
   */
  function showError(message, options = {}) {
    return createNotification(message, 'error', options);
  }
  
  /**
   * Initialize floating particles in the background for cosmic effect
   * 
   * @param {number} count - Number of particles to create
   */
  function initCosmicParticles(count = 30) {
    if (!config.particlesEnabled) return;
    
    // Create container for particles
    const container = document.createElement('div');
    container.className = 'cosmic-particles-container';
    container.style.position = 'fixed';
    container.style.top = '0';
    container.style.left = '0';
    container.style.width = '100%';
    container.style.height = '100%';
    container.style.pointerEvents = 'none';
    container.style.zIndex = '0';
    document.body.appendChild(container);
    
    // Get colors for current emotion
    const colors = config.emotionColors[currentEmotion];
    
    // Create particles
    for (let i = 0; i < count; i++) {
      const particle = document.createElement('div');
      particle.className = 'cosmic-floating';
      
      // Random size (2-5px)
      const size = 2 + Math.random() * 3;
      particle.style.width = `${size}px`;
      particle.style.height = `${size}px`;
      
      // Random position
      particle.style.left = `${Math.random() * 100}%`;
      particle.style.top = `${Math.random() * 100}%`;
      
      // Random color (primary or secondary)
      const color = Math.random() > 0.5 ? colors.primary : colors.secondary;
      particle.style.backgroundColor = color;
      particle.style.boxShadow = `0 0 ${size * 2}px ${color}`;
      
      // Random float direction
      particle.style.setProperty('--float-x', `${(Math.random() * 60) - 30}px`);
      
      // Random animation duration (8-15s)
      const duration = 8 + Math.random() * 7;
      particle.style.animationDuration = `${duration}s`;
      
      // Random delay
      const delay = Math.random() * 5;
      particle.style.animationDelay = `${delay}s`;
      
      // Add to container
      container.appendChild(particle);
    }
  }
  
  // Expose public API
  window.MashaaerEffects = {
    init,
    setEmotion,
    playSound,
    applyTo,
    createParticleBurst,
    showSuccess,
    showError,
    createNotification,
    initCosmicParticles,
    getSoundEnabled: () => config.soundEnabled,
    setSoundEnabled: (enabled) => { config.soundEnabled = !!enabled; },
    getParticlesEnabled: () => config.particlesEnabled,
    setParticlesEnabled: (enabled) => { config.particlesEnabled = !!enabled; }
  };
  
  // Auto-initialize on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', init);
})();
