{
  "timestamp": "2025-04-03T19:36:44.885913",
  "execution_time_seconds": 9.356398105621338,
  "exit_code": 1,
  "passed": false,
  "raw_output": "============================= test session starts ==============================\nplatform linux -- Python 3.11.10, pytest-8.3.5, pluggy-1.5.0 -- /home/runner/workspace/.pythonlibs/bin/python\ncachedir: .pytest_cache\nrootdir: /home/runner/workspace\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, mock-3.14.0, flask-1.3.0\ncollecting ... collected 9 items\n\ntests/test_api_caching.py::test_analyze_emotion_cache_hit FAILED         [ 11%]\ntests/test_api_caching.py::test_analyze_emotion_bypass_cache FAILED      [ 22%]\ntests/test_api_caching.py::test_analyze_emotion_cache_expiration FAILED  [ 33%]\ntests/test_api_caching.py::test_speak_cache_hit FAILED                   [ 44%]\ntests/test_api_caching.py::test_speak_different_voice_parameters FAILED  [ 55%]\ntests/test_api_caching.py::test_cache_error_handling FAILED              [ 66%]\ntests/test_api_caching.py::test_cache_invalidation FAILED                [ 77%]\ntests/test_api_caching.py::test_performance_metrics FAILED               [ 88%]\ntests/test_api_caching.py::test_cache_hit_count_tracking FAILED          [100%]\n\n=================================== FAILURES ===================================\n________________________ test_analyze_emotion_cache_hit ________________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f565612ad50>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565610efd0>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565612b0d0>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f565612b250>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565610efd0>\ncursor = <sqlite3.Cursor object at 0x7f565af7a740>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565612b0d0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f565610f890>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f565b339b20>\napp = <Flask 'main'>\n\n    def test_analyze_emotion_cache_hit(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the emotion analysis endpoint correctly uses cache.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565610efd0>\ncursor = <sqlite3.Cursor object at 0x7f565af7a740>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565612b0d0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n______________________ test_analyze_emotion_bypass_cache _______________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f56557862d0>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f5655785110>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5655786810>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f56557866d0>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f5655785110>\ncursor = <sqlite3.Cursor object at 0x7f5654c0d740>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5655786810>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5655785410>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f565b3a74c0>\napp = <Flask 'main'>\n\n    def test_analyze_emotion_bypass_cache(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the bypass_cache parameter correctly skips the cache.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f5655785110>\ncursor = <sqlite3.Cursor object at 0x7f5654c0d740>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5655786810>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n____________________ test_analyze_emotion_cache_expiration _____________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f5656148610>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565b3bb850>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5656148a90>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f56561493d0>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565b3bb850>\ncursor = <sqlite3.Cursor object at 0x7f565af7bb40>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5656148a90>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f565b3bbb50>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f565b339080>\napp = <Flask 'main'>\nadd_test_cache_entry = <function add_test_cache_entry.<locals>._add_entry at 0x7f565b339b20>\n\n    def test_analyze_emotion_cache_expiration(client: FlaskClient, db_session: Session, clear_cache, app: Flask, add_test_cache_entry):\n        \"\"\"Tests that cached entries expire correctly and are refreshed.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565b3bb850>\ncursor = <sqlite3.Cursor object at 0x7f565af7bb40>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5656148a90>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n_____________________________ test_speak_cache_hit _____________________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f5656157710>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f56561560d0>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5656157dd0>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f5656157d10>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f56561560d0>\ncursor = <sqlite3.Cursor object at 0x7f565c7f3ac0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5656157dd0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5656156ed0>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f565b3a6e80>\napp = <Flask 'main'>\n\n    def test_speak_cache_hit(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the TTS endpoint correctly uses cache.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f56561560d0>\ncursor = <sqlite3.Cursor object at 0x7f565c7f3ac0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5656157dd0>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n____________________ test_speak_different_voice_parameters _____________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f565611d650>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565611c710>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565611f190>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f565611df90>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565611c710>\ncursor = <sqlite3.Cursor object at 0x7f56557bbac0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565611f190>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f565611cb10>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f5660925e40>\napp = <Flask 'main'>\n\n    def test_speak_different_voice_parameters(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that the TTS endpoint creates different cache entries for different voices.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565611c710>\ncursor = <sqlite3.Cursor object at 0x7f56557bbac0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565611f190>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n__________________________ test_cache_error_handling ___________________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f565af9cd90>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565af9eed0>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5655600c10>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f5655600590>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565af9eed0>\ncursor = <sqlite3.Cursor object at 0x7f56552d0fc0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5655600c10>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f565af9c990>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f565b339a80>\napp = <Flask 'main'>\n\n    def test_cache_error_handling(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests error handling in the caching mechanism.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565af9eed0>\ncursor = <sqlite3.Cursor object at 0x7f56552d0fc0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f5655600c10>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n___________________________ test_cache_invalidation ____________________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f565610d3d0>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565afe3710>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565610e850>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f565610f790>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565afe3710>\ncursor = <sqlite3.Cursor object at 0x7f5654c0cfc0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565610e850>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f565afe3c10>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f565b3d39c0>\napp = <Flask 'main'>\nadd_test_cache_entry = <function add_test_cache_entry.<locals>._add_entry at 0x7f565b3d3ba0>\n\n    def test_cache_invalidation(client: FlaskClient, db_session: Session, clear_cache, app: Flask, add_test_cache_entry):\n        \"\"\"Tests that cache entries can be invalidated programmatically.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565afe3710>\ncursor = <sqlite3.Cursor object at 0x7f5654c0cfc0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565610e850>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n___________________________ test_performance_metrics ___________________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f565b38bf50>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565b388890>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565b389790>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f565b38b710>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565b388890>\ncursor = <sqlite3.Cursor object at 0x7f56558dce40>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565b389790>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f565b38a010>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f565b3a6b60>\napp = <Flask 'main'>\n\n    def test_performance_metrics(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that caching improves performance.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f565b388890>\ncursor = <sqlite3.Cursor object at 0x7f56558dce40>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565b389790>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n________________________ test_cache_hit_count_tracking _________________________\n\nself = <sqlalchemy.engine.base.Connection object at 0x7f56561488d0>\ndialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f56561497d0>\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565b335350>\nstatement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f565b335a90>\nparameters = [()]\n\n    def _exec_single_context(\n        self,\n        dialect: Dialect,\n        context: ExecutionContext,\n        statement: Union[str, Compiled],\n        parameters: Optional[_AnyMultiExecuteParams],\n    ) -> CursorResult[Any]:\n        \"\"\"continue the _execute_context() method for a single DBAPI\n        cursor.execute() or cursor.executemany() call.\n    \n        \"\"\"\n        if dialect.bind_typing is BindTyping.SETINPUTSIZES:\n            generic_setinputsizes = context._prepare_set_input_sizes()\n    \n            if generic_setinputsizes:\n                try:\n                    dialect.do_set_input_sizes(\n                        context.cursor, generic_setinputsizes, context\n                    )\n                except BaseException as e:\n                    self._handle_dbapi_exception(\n                        e, str(statement), parameters, None, context\n                    )\n    \n        cursor, str_statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        effective_parameters: Optional[_AnyExecuteParams]\n    \n        if not context.executemany:\n            effective_parameters = parameters[0]\n        else:\n            effective_parameters = parameters\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                str_statement, effective_parameters = fn(\n                    self,\n                    cursor,\n                    str_statement,\n                    effective_parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n            self._log_info(str_statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        effective_parameters,\n                        batches=10,\n                        ismulti=context.executemany,\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\",\n                    stats,\n                )\n    \n        evt_handled: bool = False\n        try:\n            if context.execute_style is ExecuteStyle.EXECUTEMANY:\n                effective_parameters = cast(\n                    \"_CoreMultiExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor,\n                        str_statement,\n                        effective_parameters,\n                        context,\n                    )\n            elif not effective_parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, str_statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, str_statement, context\n                    )\n            else:\n                effective_parameters = cast(\n                    \"_CoreSingleExecuteParams\", effective_parameters\n                )\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(\n                            cursor,\n                            str_statement,\n                            effective_parameters,\n                            context,\n                        ):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, str_statement, effective_parameters, context\n                    )\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f56561497d0>\ncursor = <sqlite3.Cursor object at 0x7f56557bbdc0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565b335350>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlite3.OperationalError: no such table: response_cache\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n\nThe above exception was the direct cause of the following exception:\n\nclient = <FlaskClient <Flask 'main'>>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5656149c10>\nclear_cache = <function clear_cache.<locals>._clear_cache at 0x7f565b339580>\napp = <Flask 'main'>\n\n    def test_cache_hit_count_tracking(client: FlaskClient, db_session: Session, clear_cache, app: Flask):\n        \"\"\"Tests that cache hit counts are properly tracked.\"\"\"\n>       clear_cache()\n\ntests/test_api_caching.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/conftest.py:76: in _clear_cache\n    db_session.query(Cache).delete()\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/query.py:3209: in delete\n    result: CursorResult[Any] = self.session.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2365: in execute\n    return self._execute_internal(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/session.py:2251: in _execute_internal\n    result: Result[Any] = compile_state_cls.orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/bulk_persistence.py:2021: in orm_execute_statement\n    return super().orm_execute_statement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/orm/context.py:306: in orm_execute_statement\n    result = conn.execute(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1416: in execute\n    return meth(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/sql/elements.py:523: in _execute_on_connection\n    return connection._execute_clauseelement(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement\n    ret = self._execute_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context\n    return self._exec_single_context(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context\n    self._handle_dbapi_exception(\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception\n    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f56561497d0>\ncursor = <sqlite3.Cursor object at 0x7f56557bbdc0>\nstatement = 'DELETE FROM response_cache', parameters = ()\ncontext = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f565b335350>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: response_cache\nE       [SQL: DELETE FROM response_cache]\nE       (Background on this error at: https://sqlalche.me/e/20/e3q8)\n\n.pythonlibs/lib/python3.11/site-packages/sqlalchemy/engine/default.py:945: OperationalError\n=============================== warnings summary ===============================\ndatabase/models.py:7\n  /home/runner/workspace/database/models.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_api_caching.py::test_analyze_emotion_cache_hit - sqlalchemy...\nFAILED tests/test_api_caching.py::test_analyze_emotion_bypass_cache - sqlalch...\nFAILED tests/test_api_caching.py::test_analyze_emotion_cache_expiration - sql...\nFAILED tests/test_api_caching.py::test_speak_cache_hit - sqlalchemy.exc.Opera...\nFAILED tests/test_api_caching.py::test_speak_different_voice_parameters - sql...\nFAILED tests/test_api_caching.py::test_cache_error_handling - sqlalchemy.exc....\nFAILED tests/test_api_caching.py::test_cache_invalidation - sqlalchemy.exc.Op...\nFAILED tests/test_api_caching.py::test_performance_metrics - sqlalchemy.exc.O...\nFAILED tests/test_api_caching.py::test_cache_hit_count_tracking - sqlalchemy....\n========================= 9 failed, 1 warning in 4.45s =========================\n"
}