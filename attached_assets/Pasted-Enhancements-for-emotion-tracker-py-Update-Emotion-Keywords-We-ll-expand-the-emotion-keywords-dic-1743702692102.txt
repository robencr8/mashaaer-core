Enhancements for emotion_tracker.py

Update Emotion Keywords:

We'll expand the emotion_keywords dictionary with more diverse expressions, including slang, idioms, and context-specific terms.
We'll also add weights to keywords based on their intensity or relevance.
Enhance Rule-Based Analysis:

We'll incorporate regular expressions and pattern matching to identify more complex emotional cues.
We'll use external lexical resources (e.g., WordNet, sentiment lexicons) to improve accuracy.
We'll implement contextual analysis to consider the surrounding words and phrases.
Integrate OpenAI Analysis:

We'll refine the prompt engineering for OpenAI to get more detailed and accurate emotion analysis.
We'll explore using OpenAI's function calling to extract structured emotion data.
We'll implement error handling and fallback mechanisms in case the OpenAI API is unavailable.
Implementation in emotion_tracker.py

Here's an example of how we can modify the emotion_tracker.py file:

Python

import logging
import re
import json
from database.db_manager import DatabaseManager
from openai import OpenAI
import os

logger = logging.getLogger(__name__)

class EmotionTracker:
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.emotion_keywords = {
            "happy": ["joy", "delighted", "ecstatic", "thrilled", "content", "blissful", "cheerful"],
            "sad": ["sorrow", "grief", "melancholy", "despair", "heartbroken", "gloomy", "miserable"],
            "angry": ["furious", "enraged", "irritated", "annoyed", "resentful", "hostile", "indignant"],
            "surprised": ["amazed", "astonished", "shocked", "stunned", "bewildered", "flabbergasted", "perplexed"],
            "fearful": ["anxious", "terrified", "panic", "apprehensive", "dread", "alarmed", "timid"],
            "disgusted": ["repulsed", "nauseated", "offended", "revolted", "sickened", "displeased", "aversion"],
            "neutral": ["indifferent", "apathetic", "unmoved", "impassive", "nonchalant", "unconcerned", "detached"],
        }
        self.openai_client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

    def _analyze_with_rules(self, text):
        """Enhanced rule-based emotion analysis."""
        text = text.lower()
        emotions = {}
        for emotion, keywords in self.emotion_keywords.items():
            for keyword in keywords:
                if re.search(r"\b" + keyword + r"\b", text):
                    emotions[emotion] = emotions.get(emotion, 0) + 1

        if emotions:
            return max(emotions, key=emotions.get)
        return "neutral"

    def _analyze_with_openai(self, text):
        """Emotion analysis using OpenAI API."""
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Analyze the emotion in the given text. Return only one emotion from: happy, sad, angry, surprised, fearful, disgusted, neutral."},
                    {"role": "user", "content": text},
                ],
                max_tokens=10,
            )
            return response.choices[0].message.content.lower().strip()
        except Exception as e:
            logger.error(f"OpenAI analysis error: {str(e)}")
            return None

    def analyze_text(self, text):
        """Analyzes text for emotion using rules and OpenAI."""
        emotion = self._analyze_with_rules(text)
        if emotion == "neutral":
            openai_emotion = self._analyze_with_openai(text)
            if openai_emotion:
                emotion = openai_emotion
        return emotion

    def log_emotion(self, emotion, text, session_id=None, source="text"):
        """Logs the detected emotion to the database."""
        try:
            timestamp = datetime.now().isoformat()
            self.db_manager.execute_query(
                "INSERT INTO emotion_data (session_id, emotion, timestamp, text, source) VALUES (?, ?, ?, ?, ?)",
                (session_id, emotion, timestamp, text, source),
            )
            logger.info(f"Emotion logged: {emotion} (session: {session_id})")
        except Exception as e:
            logger.error(f"Error logging emotion: {str(e)}")

    def get_emotion_history(self, days=7):
        """Retrieves emotion history from the database."""
        try:
            # ... (database query logic) ...
            return []  # Replace with actual results
        except Exception as e:
            logger.error(f"Error retrieving emotion history: {str(e)}")
            return []
Next Steps

Expand the emotion_keywords dictionary.
Implement regular expressions and pattern matching in _analyze_with_rules().
Refine the OpenAI prompt and explore function calling.
Add error handling and fallback mechanisms for the OpenAI API.
Integrate the enhanced emotion_tracker into the Flask application.
Add unit and integration tests to verify the changes.