import sqlite3
import logging
import os
import json

logger = logging.getLogger(__name__)

class DatabaseManager:
    def __init__(self, config, db_path="robin_ai.db"):
        self.db_path = db_path or config.DB_PATH
        self._ensure_db_directory()
        self.connection_pool = sqlite3.PoolingConnection(self.db_path)

    def _ensure_db_directory(self):
        dir_path = os.path.dirname(self.db_path)
        if dir_path and not os.path.exists(dir_path):
            os.makedirs(dir_path)
            logger.info(f"Created database directory: {dir_path}")

    def get_connection(self):
        return self.connection_pool.connection()

    def initialize_db(self):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()

                # Create tables
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS settings (
                        key TEXT PRIMARY KEY,
                        value TEXT
                    )
                """)

                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS emotion_data (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        session_id TEXT,
                        emotion TEXT,
                        timestamp TEXT,
                        intensity REAL,
                        text TEXT,
                        source TEXT
                    )
                """)

                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS faces (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT,
                        image_path TEXT,
                        metadata TEXT,
                        last_seen TEXT
                    )
                """)

                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS recognition_history (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT,
                        timestamp TEXT,
                        confidence REAL,
                        emotion TEXT,
                        session_id TEXT
                    )
                """)

                # Indexes for performance
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_emotion_data_timestamp ON emotion_data (timestamp)")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_emotion_data_session_id ON emotion_data (session_id)")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_recognition_history_timestamp ON recognition_history (timestamp)")
                cursor.execute("CREATE INDEX IF NOT EXISTS idx_recognition_history_name ON recognition_history (name)")

                conn.commit()
            logger.info("✅ Database initialized successfully.")

        except sqlite3.Error as e:
            logger.error(f"❌ Error initializing database: {str(e)}")

    def set_setting(self, key, value):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("REPLACE INTO settings (key, value) VALUES (?, ?)", (key, value))
                conn.commit()
            logger.debug(f"Setting updated: {key} = {value}")
        except sqlite3.Error as e:
            logger.error(f"Error setting value in DB: {str(e)}")

    def get_setting(self, key, default=None):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT value FROM settings WHERE key = ?", (key,))
                result = cursor.fetchone()
                return result[0] if result else default
        except sqlite3.Error as e:
            logger.error(f"Error retrieving setting {key}: {str(e)}")
            return default

    def execute_query(self, query, params=()):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(query, params)
                results = cursor.fetchall()
                return results
        except sqlite3.Error as e:
            logger.error(f"Error executing query: {str(e)}")
            return []

    def get_db_size(self):
        try:
            if os.path.exists(self.db_path):
                size_bytes = os.path.getsize(self.db_path)
                return f"{round(size_bytes / 1024 / 1024, 2)} MB"
            return "0 MB"
        except Exception as e:
            logger.error(f"Error getting DB size: {str(e)}")
            return "Unknown"

    def save_face_metadata(self, face_id, metadata):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("UPDATE faces SET metadata = ? WHERE id = ?", (json.dumps(metadata), face_id))
                conn.commit()
        except sqlite3.Error as e:
            logger.error(f"Error saving face metadata: {str(e)}")

    def load_face_metadata(self, face_id):
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT metadata FROM faces WHERE id = ?", (face_id,))
                result = cursor.fetchone()
                if result and result[0]:
                    return json.loads(result[0])
                return {}
        except sqlite3.Error as e:
            logger.error(f"Error loading face metadata: {str(e)}")
            return {}
