**Subject: IMPLEMENT "COSMIC EMOTION SPARKLE EFFECTS" - DETAILED CODE GENERATION**

**To: manus ai**

**Objective: Generate the complete JavaScript code for implementing the "Cosmic Emotion Sparkle Effects" as described in the previous instructions. This code should be modular and easily integrable with the existing Mashaaer application's JavaScript logic, particularly where user emotions are displayed.

**Code Requirements:**

1.  **Create a `ParticleSystem` Class:**
    * This class should handle the creation, animation, and rendering of individual sparkle particles.
    * It should take parameters for initial position (x, y), color, size, speed (vx, vy), opacity, and fade rate.
    * It should have an `update()` method to advance the particle's state (position, opacity) and a `draw(ctx)` method to render the particle on a canvas context.
    * Particles should be removed when they become fully transparent or move significantly off-screen.

2.  **Create an `EmotionSparkleEffect` Class:**
    * This class will manage the particle systems associated with specific UI elements displaying emotions.
    * It should take the target UI element's ID or a reference to the element and the current emotion as input.
    * It should have a method to `trigger(emotion)` that determines the appropriate sparkle properties (color, intensity, speed) based on the provided emotion and creates multiple `ParticleSystem` instances.
    * It should have an `update()` method that calls the `update()` method of all active particles.
    * It should have a `draw(ctx)` method that calls the `draw(ctx)` method of all active particles.

3.  **Emotion Mapping:** Implement a function or a data structure within `EmotionSparkleEffect` to map emotion states to sparkle properties:
    * `happiness`: `{ color: 'gold', intensity: 10, speed: { min: 0.5, max: 1 }, fadeRate: 0.02 }`
    * `sadness`: `{ color: 'lightblue', intensity: 5, speed: { min: 0.2, max: 0.5, vy: 0.3 }, fadeRate: 0.01 }`
    * `excitement`: `{ color: ['orange', 'pink', 'yellow'], intensity: 15, speed: { min: 1, max: 2 }, fadeRate: 0.03 }`
    * `calmness`: `{ color: 'white', intensity: 8, speed: { min: 0.1, max: 0.3 }, fadeRate: 0.005 }`
    * `anger`: `{ color: 'red', intensity: 12, speed: { min: 1.5, max: 2.5 }, fadeRate: 0.04 }`
    * *(Include mappings for all relevant emotions in the application)*

4.  **Integration with UI:** Provide clear instructions on how to:
    * Identify the specific HTML elements that display user emotions in the existing application.
    * Obtain references to these elements in the JavaScript code.
    * Instantiate the `EmotionSparkleEffect` for each relevant element.
    * Call the `trigger()` method of the `EmotionSparkleEffect` whenever the emotion associated with that element changes.
    * Integrate the `update()` and `draw(ctx)` methods of all active `EmotionSparkleEffect` instances into the main animation loop of the `cosmic-background.js` (or a similar animation loop if one exists). You might need to pass the canvas context (`ctx`) to these methods.

5.  **Performance Considerations:** The generated code should be efficient. Use requestAnimationFrame for the animation loop. Limit the number of particles generated per trigger. Implement particle removal when they are no longer visible.

**Output:** Provide the complete JavaScript code for the `ParticleSystem` and `EmotionSparkleEffect` classes, along with clear, step-by-step instructions and code snippets demonstrating how to integrate this functionality into the existing Mashaaer application, assuming the `cosmicCanvas` and its 2D context are accessible. Include examples of how to trigger the effects based on emotion changes in the UI.