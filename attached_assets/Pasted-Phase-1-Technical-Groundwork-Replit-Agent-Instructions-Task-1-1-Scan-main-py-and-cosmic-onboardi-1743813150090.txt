Phase 1: Technical Groundwork (Replit Agent Instructions)
Task 1.1: Scan main.py and cosmic_onboarding.html
 * Goal: Familiarize with the code structure and key components.
 * Commands:
   # Show the first 50 lines of main.py
head -n 50 main.py

# Show all @app.route decorators in main.py
grep -n "@app.route" main.py

# Show the first 50 lines of cosmic_onboarding.html
head -n 50 templates/cosmic_onboarding.html

# Show all fetch() calls in cosmic_onboarding.html
grep -n "fetch(" templates/cosmic_onboarding.html

 * Expected Outcome: The agent should provide the output of these commands, showing the initial structure of the files.
Task 1.2: Verify /api Routes
 * Goal: Test the basic functionality of the API endpoints.
 * Commands:
   # Test /api/status endpoint
curl -i http://localhost:5000/api/status

# Test /api/speak endpoint
curl -X POST -H "Content-Type: application/json" -d '{"text": "Test", "language": "en"}' http://localhost:5000/api/speak

# Test /api/listen endpoint (if it exists)
curl -X POST --data-binary @audio.wav http://localhost:5000/api/listen -H "Content-Type: multipart/form-data" # Replace audio.wav with a real audio file

   * Note: The audio.wav file needs to be present in the Replit workspace for the /api/listen test. You might need to provide that file or instruct the agent to create a dummy one.
   * Verify: The agent should report the response status codes, headers, and bodies.
 * Expected Outcome: The agent should report successful responses (200 OK) and valid data for each endpoint.
Task 1.3: Confirm .env Port Usage
 * Goal: Ensure the application uses the PORT variable from the .env file.
 * Commands:
   # Check if .env exists
ls -la .env

# If it exists, show its content
if [ -f ".env" ]; then
    cat .env
fi

# Show the app.run() line in main.py
grep -n "app.run(host" main.py

 * Expected Outcome: The agent should confirm the presence and content of .env (if it exists) and identify the line in main.py where app.run() is called.
Task 1.4: STT & TTS Health Check
 * Goal: Verify the basic functionality of the voice modules.
 * Commands: (These might require more specific knowledge of your voice modules)
   # Example: If you have a function to list available voices
# (Adapt to your actual function/module)
python -c "from tts import tts_manager; print(tts_manager.list_voices())"

# Example: If you have a function to test STT (adapt to your module)
# (Requires an audio file)
python -c "from voice import recognition; print(voice_recognition.process_audio('audio.wav'))"

   * Note: The agent will need more specific instructions based on your STT and TTS module structure.
 * Expected Outcome: The agent should provide the output of the commands, showing available voices and successful STT processing (if applicable).
Important Notes for the Replit Agent:
 * Be Precise: Execute the commands exactly as provided.
 * Report All Output: Include the full output of each command in the response.
 * Follow Order: Execute the tasks in the order provided.
 * Focus on the Goal: Remember the overall goal of each task and provide only the information that directly helps achieve that goal.
 * Don't Explain Unless Asked: Avoid unnecessary explanations unless explicitly requested.
Let me know if you'd like me to modify or expand these instructions. I'm ready to proceed!