<!DOCTYPE html>
<html lang="en" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <meta name="theme-color" content="#180538">
  <meta name="description" content="Mashaaer - مشاعر | The emotional AI companion that understands your feelings">
  <title>مشاعر | Mashaaer</title>
  <link rel="manifest" href="/manifest.json">
  <link rel="icon" href="/static/favicon.ico">
  <link rel="apple-touch-icon" href="/static/icons/icon-192x192.png">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="apple-mobile-web-app-title" content="Mashaaer">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="/static/css/micro_interactions.css">
  <script>
    // Register the service worker for PWA functionality
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', function() {
        navigator.serviceWorker.register('/service-worker.js').then(function(registration) {
          console.log('Service Worker تم تسجيله بنجاح:', registration.scope);
        }, function(err) {
          console.log('Service Worker فشل التسجيل:', err);
        });
      });
    }
  </script>
  <style>
    /* CSS styles are here - not changed */
  </style>
</head>
<body>
  <!-- محتوى HTML السابق بلا تغيير -->
</body>
</html>
          console.log('Service Worker تم تسجيله بنجاح:', registration.scope);
        }, function(err) {
          console.log('Service Worker فشل التسجيل:', err);
        });
      });
    }
  </script>
  <style>
    /* CSS styles are here - not changed */
  </style>
</head>
<body>
  <!-- Audio notification overlay -->
  <div id="audio-notification" class="audio-notification">
    <div class="audio-notification-content">
      <i class="fas fa-volume-up"></i>
      <span class="ar">انقر في أي مكان لتفعيل الصوت</span>
      <span class="en">Click anywhere to enable audio</span>
    </div>
  </div>

  <!-- Background elements -->
  <div class="stars-container">
    <div class="stars"></div>
    <div class="twinkling"></div>
    <div class="falling-stars" id="falling-stars"></div>
  </div>
  
  <audio id="background-audio" loop preload="auto">
    <source src="/static/sounds/cosmic.mp3" type="audio/mp3">
  </audio>

  <!-- Audio toggle button -->
  <div class="audio-toggle" id="audio-toggle">
    <i class="fas fa-volume-up" id="audio-icon"></i>
  </div>

  <!-- Language toggle -->
  <div class="language-toggle">
    <span>Language</span>
    <div class="lang-switch">
      <div class="lang-option active" data-lang="ar">AR</div>
      <div class="lang-option" data-lang="en">EN</div>
    </div>
  </div>

  <!-- Main splash content -->
  <div class="splash-container">
    <div class="main-sphere">
      <div class="orbit">
        <div class="orbital-particle"></div>
      </div>
      <div class="orbit">
        <div class="orbital-particle"></div>
      </div>
      <div class="orbit">
        <div class="orbital-particle"></div>
      </div>
      <div class="sphere-glow" id="sphere-glow"></div>
      <div class="sphere" id="interactive-sphere"></div>
    </div>
    
    <h1 class="title" id="title">مشاعر | Mashaaer</h1>
    <p class="subtitle" id="subtitle">اصنع المستقبل، أنا أسمعك</p>
    <p class="subtitle-en" id="subtitle-en">Create the future, I hear you</p>
    
    <button class="voice-prompt-button" id="voice-prompt-button">
      <i class="fas fa-microphone"></i>
      <span class="ar">قل "مرحبا" للبدء</span>
      <span class="en">Say "Hello" to begin</span>
    </button>
    
    <button class="enter-button" id="enter-button">البدء | Start</button>
    
    <div class="voice-status" id="voice-status">
      <div class="voice-indicator">
        <div class="voice-waves"></div>
        <div class="voice-waves"></div>
        <div class="voice-waves"></div>
        <div class="voice-waves"></div>
      </div>
      <p id="voice-status-text"></p>
    </div>
  </div>

  <script>
    // Main JavaScript functionality
    document.addEventListener('DOMContentLoaded', function() {
      // Configuration
      const config = {
        particlesEnabled: true,
        starsEnabled: true,
        fallingStarsEnabled: true,
        touchFeedbackEnabled: true,
        emotionColorsEnabled: true,
        defaultEmotion: 'neutral',
        audioEnabled: false,
        breathingEffectsEnabled: true
      };
      
      // Initialize elements
      const sphere = document.getElementById('interactive-sphere');
      const sphereGlow = document.getElementById('sphere-glow');
      const title = document.getElementById('title');
      const subtitle = document.getElementById('subtitle');
      const subtitleEn = document.getElementById('subtitle-en');
      const voicePromptButton = document.getElementById('voice-prompt-button');
      const enterButton = document.getElementById('enter-button');
      const voiceStatus = document.getElementById('voice-status');
      const voiceStatusText = document.getElementById('voice-status-text');
      const audioToggle = document.getElementById('audio-toggle');
      const audioIcon = document.getElementById('audio-icon');
      const audioNotification = document.getElementById('audio-notification');
      
      // State variables
      let recognizedEmotion = config.defaultEmotion;
      let isListening = false;
      let audioEnabled = false;
      let currentLanguage = localStorage.getItem('user_language') || 'ar';
      
      // Sound cache for improved performance
      const soundCache = {};
      
      // Start disabled to respect browser autoplay policies
      audioIcon.className = 'fas fa-volume-mute';
      
      // Initialize breathing effect if enabled
      if (config.breathingEffectsEnabled) {
        sphere.classList.add('breathe');
        sphereGlow.classList.add('gentle-glow');
        document.querySelectorAll('.orbit').forEach(orbit => {
          orbit.classList.add('orbit-breathe');
        });
      }
      
      // Helper function to get a color based on emotion
      function getEmotionColor(emotion = recognizedEmotion) {
        const colors = {
          happy: '#FFD700', // Gold
          sad: '#4169E1',   // Royal blue
          angry: '#FF4500', // Red/orange
          neutral: '#9370DB', // Medium purple
          default: '#9370DB'  // Default cosmic purple
        };
        
        return colors[emotion] || colors.default;
      }
      
      // Update particle colors based on emotion
      function updateParticleColors(emotion) {
        const color = getEmotionColor(emotion);
        document.documentElement.style.setProperty('--particle-color', color);
        document.documentElement.style.setProperty('--glow-color', color);
      }
      
      // Initialize with default emotion
      updateParticleColors(recognizedEmotion);
      
      // Voice prompt button
      voicePromptButton.addEventListener('click', function() {
        voicePromptButton.classList.add('active');
        
        // Start the voice recognition
        if (!isListening) {
          startListening();
        } else {
          stopListening();
        }
        
        // Sound feedback (with autoplay restrictions handling)
        if (audioEnabled) {
          playCosmicSound('click');
        }
      });
      
      // Enter button
      enterButton.addEventListener('click', function() {
        // Sound feedback (with autoplay restrictions handling)
        if (audioEnabled) {
          playCosmicSound('click');
        }
        
        // Navigate to main application
        window.location.href = "/";
      });
      
      // Audio toggle functionality
      audioToggle.addEventListener('click', function() {
        toggleAudio();
        
        // Play sound feedback if enabling audio
        if (audioEnabled) {
          playCosmicSound('click');
        }
      });
      
      // Function to toggle audio state
      function toggleAudio() {
        audioEnabled = !audioEnabled;
        
        if (audioEnabled) {
          audioIcon.className = 'fas fa-volume-up';
          
          // Try to play background audio if audio is now enabled
          try {
            document.getElementById('background-audio').play().catch(err => {
              console.warn('Background audio autoplay error:', err);
            });
          } catch (err) {
            console.error('Error playing background audio:', err);
          }
        } else {
          audioIcon.className = 'fas fa-volume-mute';
          
          // Pause background audio if disabling
          try {
            document.getElementById('background-audio').pause();
          } catch (err) {
            console.error('Error pausing background audio:', err);
          }
        }
      }
      
      // Voice recognition simulation (for demonstration)
      function startListening() {
        if (isListening) return;
        
        isListening = true;
        voicePromptButton.classList.add('listening');
        voiceStatus.style.display = 'flex';
        voiceStatusText.innerText = currentLanguage === 'ar' ? 'جارٍ الاستماع...' : 'Listening...';
        
        // Audio feedback
        if (audioEnabled) {
          playCosmicSound('listen_start');
        }
        
        // Simulate voice recognition (demo)
        setTimeout(() => {
          const emotions = ['happy', 'sad', 'neutral', 'angry'];
          const randomEmotion = emotions[Math.floor(Math.random() * emotions.length)];
          
          // Update UI based on recognized emotion
          analyzeEmotion('hello', randomEmotion);
          
          stopListening();
        }, 3000);
      }
      
      function stopListening() {
        isListening = false;
        voicePromptButton.classList.remove('listening');
        voiceStatus.style.display = 'none';
        
        // Audio feedback
        if (audioEnabled) {
          playCosmicSound('listen_stop');
        }
      }
      
      // Analyze text for emotion
      function analyzeEmotion(text, presetEmotion = null) {
        // If we have a preset emotion (for demo), use it directly
        if (presetEmotion) {
          applyEmotionToSphere(presetEmotion);
          return;
        }
        
        // Otherwise use the API
        fetch('/api/analyze-emotion', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ text: text })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success && data.emotion) {
            // If server responds with emotion, use it
            applyEmotionToSphere(data.emotion);
          }
        })
        .catch(error => {
          console.error('Error analyzing emotion:', error);
        });
      }
      
      // Apply emotion to sphere
      function applyEmotionToSphere(emotion) {
        // Remove all emotion classes
        sphereGlow.classList.remove('sphere-happy', 'sphere-sad', 'sphere-angry');
        
        // Add the new emotion class
        if (emotion !== 'neutral') {
          sphereGlow.classList.add(`sphere-${emotion}`);
        }
        
        // Update global emotion state
        recognizedEmotion = emotion;
        
        // Change particle colors based on emotion
        updateParticleColors(emotion);
      }
      
      // Create particle burst animation
      function createParticleBurst() {
        const burstCount = 20; // Number of particles in the burst
        
        for (let i = 0; i < burstCount; i++) {
          const angle = Math.random() * Math.PI * 2;
          const distance = 50 + Math.random() * 100;
          const speed = 1 + Math.random() * 2;
          
          const particle = document.createElement('div');
          particle.className = 'particle-burst';
          
          // Get position relative to sphere center
          const sphereRect = sphere.getBoundingClientRect();
          const centerX = sphereRect.left + sphereRect.width / 2;
          const centerY = sphereRect.top + sphereRect.height / 2;
          
          // Style the particle
          particle.style.width = `${3 + Math.random() * 5}px`;
          particle.style.height = particle.style.width;
          particle.style.background = getEmotionColor();
          particle.style.position = 'fixed';
          particle.style.borderRadius = '50%';
          particle.style.boxShadow = `0 0 10px ${getEmotionColor()}`;
          particle.style.zIndex = '100';
          
          // Calculate start position (center of sphere)
          particle.style.left = `${centerX}px`;
          particle.style.top = `${centerY}px`;
          
          // Add to DOM
          document.body.appendChild(particle);
          
          // Animate particle
          setTimeout(() => {
            // Set end position
            particle.style.transform = `translate(${Math.cos(angle) * distance}px, ${Math.sin(angle) * distance}px)`;
            particle.style.opacity = '0';
            
            // Remove after animation
            setTimeout(() => {
              document.body.removeChild(particle);
            }, 1000);
          }, 10);
        }
      }
      
      // Add interactive events to sphere
      sphere.addEventListener('click', function(e) {
        if (audioEnabled) {
          playCosmicSound('click');
        }
        
        // Create ripple and particle effect
        createRipple(sphere);
        if (config.particlesEnabled) {
          createParticleBurst();
        }
        
        // Animate title
        title.classList.add('pulse');
        setTimeout(() => {
          title.classList.remove('pulse');
        }, 1000);
      });
      
      // Language switch functionality
      document.querySelectorAll('.lang-option').forEach(option => {
        option.addEventListener('click', function() {
          // Get language code
          const lang = this.getAttribute('data-lang');
          
          // Set language
          setLanguage(lang);
          
          // Update active state
          document.querySelectorAll('.lang-option').forEach(opt => {
            opt.classList.remove('active');
          });
          this.classList.add('active');
          
          // Play welcome sound in new language
          // Do NOT play sounds automatically to avoid browser autoplay restrictions
          if (audioEnabled) {
            playCosmicSound('welcome', lang);
          }
        });
      });
      
      // Set initial language
      function setLanguage(lang) {
        currentLanguage = lang;
        localStorage.setItem('user_language', lang);
        
        if (lang === 'ar') {
          document.documentElement.dir = 'rtl';
          subtitle.style.display = 'block';
          subtitleEn.style.display = 'none';
          enterButton.textContent = 'البدء | Start';
        } else {
          document.documentElement.dir = 'ltr';
          subtitle.style.display = 'none';
          subtitleEn.style.display = 'block';
          enterButton.textContent = 'Start | البدء';
        }
      }
      
      // Initialize the correct language
      setLanguage(currentLanguage);
      
      // Create ripple effect when sphere is clicked
      function createRipple(element) {
        const ripple = document.createElement('div');
        ripple.style.position = 'absolute';
        ripple.style.width = '100%';
        ripple.style.height = '100%';
        ripple.style.top = '0';
        ripple.style.left = '0';
        ripple.style.borderRadius = '50%';
        ripple.style.background = 'radial-gradient(circle, rgba(138, 43, 226, 0.8) 0%, rgba(138, 43, 226, 0) 70%)';
        ripple.style.transform = 'scale(0)';
        ripple.style.animation = 'ripple 1s linear';
        
        // Add keyframes for the ripple animation
        const style = document.createElement('style');
        style.textContent = `
          @keyframes ripple {
            to {
              transform: scale(2);
              opacity: 0;
            }
          }
        `;
        document.head.appendChild(style);
        
        // Add ripple element
        element.appendChild(ripple);
        
        // Remove after animation completes
        setTimeout(() => {
          element.removeChild(ripple);
          document.head.removeChild(style);
        }, 1000);
      }
      
      // Function to play cosmic sounds with enhanced error handling
      function playCosmicSound(soundType, language = currentLanguage) {
        // Exit early if audio is disabled
        if (!audioEnabled) {
          console.log('Audio is disabled. Enable audio by clicking anywhere on the screen.');
          return;
        }
        
        // Check cache first
        if (soundType !== 'welcome' && soundCache[soundType]) {
          soundCache[soundType].currentTime = 0;
          soundCache[soundType].play().catch(err => {
            console.warn('Cached audio play error:', err);
            // Try to recover by recreating the audio element
            delete soundCache[soundType]; 
            // Call playCosmicSound again to recreate the sound
            setTimeout(() => playCosmicSound(soundType, language), 100);
          });
          return;
        }
        
        // For non-voice sounds (UI interactions), load and play from static files
        if (soundType !== 'welcome') {
          try {
            // Create a temporary audio element for the interaction sound
            const sound = new Audio(`/static/sounds/${soundType}.mp3`);
            sound.volume = soundType === 'hover' ? 0.3 : 0.5;
            
            // Add proper load error handling
            sound.addEventListener('error', (e) => {
              console.warn(`Sound file error for ${soundType}.mp3:`, e);
            });
            
            // Play with catch for autoplay restrictions
            sound.play().catch(err => {
              console.warn('Audio play error (likely autoplay restriction):', err);
              // Still cache the sound for future use when user interacts
              soundCache[soundType] = sound;
            });
            
            // Cache for future use
            soundCache[soundType] = sound;
          } catch (err) {
            console.warn('Error creating audio element:', err);
          }
          return;
        }
        
        // For welcome sounds, use the API to get voice feedback
        fetch(`/api/play-cosmic-sound?sound_type=${soundType}&language=${language}`, {
          method: 'GET'
        })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
          }
          return response.json();
        })
        .then(data => {
          if (data.success && data.sound_path) {
            // Play the returned sound with enhanced error handling
            try {
              const sound = new Audio(data.sound_path);
              sound.volume = 0.6;
              
              // Add load error handler with improved fallback
              sound.addEventListener('error', (e) => {
                console.warn(`Welcome sound load error for ${data.sound_path}:`, e);
                
                // First try to use the local copy we created in tts_cache
                let fallbackSound = new Audio('/tts_cache/fallback.mp3');
                fallbackSound.volume = 0.6;
                
                fallbackSound.addEventListener('error', (fallbackErr) => {
                  console.warn('First fallback error, trying static welcome sound:', fallbackErr);
                  // If that fails, try the static welcome sound
                  const staticFallback = new Audio('/static/sounds/welcome.mp3');
                  staticFallback.volume = 0.6;
                  staticFallback.play().catch(staticErr => {
                    console.warn('Static fallback welcome sound play error:', staticErr);
                  });
                });
                
                fallbackSound.play().catch(err => {
                  console.warn('Fallback welcome sound play error:', err);
                  // Immediately try the static file on error
                  const staticFallback = new Audio('/static/sounds/welcome.mp3');
                  staticFallback.volume = 0.6;
                  staticFallback.play().catch(staticErr => {
                    console.warn('Static fallback welcome sound play error after catch:', staticErr);
                  });
                });
              });
              
              // Play with detailed error handling and double fallback
              sound.play().catch(err => {
                console.warn("Audio play error (likely autoplay restriction):", err);
                // Cache for future use when user interacts
                soundCache['welcome'] = sound;
                
                // Show audio notification to ensure user knows they need to interact
                document.getElementById("audio-notification").style.display = "flex";
              });
              
              // Cache for future use
              soundCache['welcome'] = sound;
            } catch (err) {
              console.warn('Error creating welcome audio element:', err);
              // Try fallback if we can't create the audio element
              try {
                const fallbackSound = new Audio('/static/sounds/welcome.mp3');
                fallbackSound.play().catch(err => {
                  console.warn('Fallback sound play error:', err);
                });
              } catch (innerErr) {
                console.error('Critical audio error, could not create audio elements:', innerErr);
              }
            }
          }
        })
        .catch(error => {
          console.error('Error fetching cosmic sound:', error);
          // Fallback to static welcome sound on API error
          try {
            const fallbackSound = new Audio('/static/sounds/welcome.mp3');
            fallbackSound.play().catch(err => {
              console.warn('Static fallback play error:', err);
            });
          } catch (err) {
            console.error('Critical fallback error:', err);
          }
        });
      }
      
      // Add hover effect to interactive elements - with debounce to prevent multiple sounds
      let lastHoverTime = 0;
      const HOVER_DEBOUNCE_TIME = 300; // milliseconds
      
      [sphere, enterButton, voicePromptButton, audioToggle].forEach(element => {
        element.addEventListener('mouseenter', function() {
          if (audioEnabled) {
            const now = Date.now();
            if (now - lastHoverTime > HOVER_DEBOUNCE_TIME) {
              playCosmicSound('hover');
              lastHoverTime = now;
            }
          }
        });
      });
      
      // Play background audio on page interaction
      document.addEventListener('click', function() {
        // Hide the audio notification
        document.getElementById("audio-notification").style.display = "none";
        
        // Enable audio and update UI
        audioEnabled = true;
        document.getElementById('audio-icon').className = 'fas fa-volume-up';
        
        // Play welcome sound now that audio is enabled
        playCosmicSound("welcome", currentLanguage);

        // Try to play background audio with error handling
        try {
          const bgAudio = document.getElementById('background-audio');
          bgAudio.play().catch(err => {
            console.error('Background audio play error:', err);
          });
        } catch (err) {
          console.error('Error playing background audio:', err);
        }
      });
      
      // Add touch interaction events for mobile
      if (config.touchFeedbackEnabled) {
        // Touch event for sphere
        sphere.addEventListener('touchstart', function(e) {
          e.preventDefault();
          this.classList.add('touched');
        });
        
        sphere.addEventListener('touchend', function(e) {
          e.preventDefault();
          this.classList.remove('touched');
          
          if (audioEnabled) {
            playCosmicSound('click');
          }
          
          // Create visual effects
          createRipple(sphere);
          if (config.particlesEnabled) {
            createParticleBurst();
          }
        });
      }
      
      // Create falling stars animation if enabled
      if (config.fallingStarsEnabled) {
        function createFallingStar() {
          const star = document.createElement('div');
          star.className = 'falling-star';
          
          // Random position and properties
          const startX = Math.random() * window.innerWidth;
          const startY = -50; // Start above the viewport
          const size = 1 + Math.random() * 3;
          const duration = 2 + Math.random() * 6;
          const delay = Math.random() * 5;
          
          // Apply styles
          star.style.left = `${startX}px`;
          star.style.top = `${startY}px`;
          star.style.width = `${size}px`;
          star.style.height = `${size * 15}px`;
          star.style.animationDuration = `${duration}s`;
          star.style.animationDelay = `${delay}s`;
          
          // Add to container
          document.getElementById('falling-stars').appendChild(star);
          
          // Remove after animation completes
          setTimeout(() => {
            try {
              document.getElementById('falling-stars').removeChild(star);
            } catch (err) {
              // Element might already be removed, just ignore
            }
          }, (duration + delay) * 1000);
        }
        
        // Create falling stars periodically
        setInterval(createFallingStar, 1000);
        
        // Create initial stars
        for (let i = 0; i < 5; i++) {
          createFallingStar();
        }
      }
    });
  </script>
</body>
</html>
